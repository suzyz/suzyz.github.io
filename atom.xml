<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suzy Zhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suzyz.github.io/"/>
  <updated>2017-11-05T13:42:05.000Z</updated>
  <id>https://suzyz.github.io/</id>
  
  <author>
    <name>Suzy Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LintCode/LRU Cache</title>
    <link href="https://suzyz.github.io/2017/11/05/lru-cache/"/>
    <id>https://suzyz.github.io/2017/11/05/lru-cache/</id>
    <published>2017-11-05T12:48:55.000Z</published>
    <updated>2017-11-05T13:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.</p><a id="more"></a><ul><li><p>get(key) : Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.</p></li><li><p>set(key, value) : Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We can use linked list together with unordered map to solve this problem. </p><p>First, we use a linked list L to record pairs of keys and values. Each time we insert a new pair (key,value), we use the map to mark the position of it.</p><p>Then, for each get(key) operation, we can locate the pair (key,value) using the map in O(1) time. We also need to move the pair to the beginning of the linked list, since it is just used. Don’t forget to modify map[key] as the position of pair (key,value) changed.</p><p>As for the set(key,value) operation,</p><ol><li>If (key,previous_value) already exits in the list, we erase it and insert the new pair.</li><li>If key is not already present, we need to check the capacity first. If the cache has reached its capacity, we erase the least recently used item, i.e. the pair at the end of the linked list. Then we insert the new pair to the beginning.<br>And of course, we need to maintain the map in the above process.</li></ol><p>The time complexities of get and set operations are both O(1), since the map is unordered.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> cap, used;</div><div class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; l;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;::iterator&gt; position;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * @param capacity: An integer</div><div class="line">    */</div><div class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</div><div class="line">        cap = capacity;</div><div class="line">        used = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param key: An integer</div><div class="line">     * @return: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(position.count(key) == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;::iterator it = position[key];</div><div class="line">            <span class="keyword">int</span> res = (*it).second;</div><div class="line">            <span class="keyword">if</span> (it != l.begin())</div><div class="line">            &#123;</div><div class="line">                l.insert(l.begin(),make_pair(key,res));</div><div class="line">                l.erase(it);</div><div class="line">                position[key] = l.begin();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param key: An integer</div><div class="line">     * @param value: An integer</div><div class="line">     * @return: nothing</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cap &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position.count(key) == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (used &gt;= cap)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;::iterator it = l.end();</div><div class="line">                --it;</div><div class="line">                position.erase((*it).first);</div><div class="line">                l.erase(it);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                ++used;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;::iterator it = position[key];</div><div class="line">            l.erase(it);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        l.insert(l.begin(),make_pair(key,value));</div><div class="line">        position[key] = l.begin();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Linked List" scheme="https://suzyz.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Top K Frequent Words</title>
    <link href="https://suzyz.github.io/2017/11/05/top-k-frequent-words/"/>
    <id>https://suzyz.github.io/2017/11/05/top-k-frequent-words/</id>
    <published>2017-11-05T12:23:26.000Z</published>
    <updated>2017-11-05T14:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Find top k frequent words with map reduce framework.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>With map reduce, we only need to implement the mapper and the reducer.</p><p>The mapper part is easy to code. Note that there may be more than one consecutive spaces in the input. As for the reducer, we calculate the frequency of each word and push the pair (word,frequency) into a priority queue, i.e. a heap. After the reduce is done, we pop k pairs from the heap.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of Input:</div><div class="line"> * template&lt;class T&gt;</div><div class="line"> * class Input &#123;</div><div class="line"> * public:</div><div class="line"> *     bool done(); </div><div class="line"> *         // Returns true if the iteration has elements or false.</div><div class="line"> *     void next();</div><div class="line"> *         // Move to the next element in the iteration</div><div class="line"> *         // Runtime error if the iteration has no more elements</div><div class="line"> *     T value();</div><div class="line"> *        // Get the current element, Runtime error if</div><div class="line"> *        // the iteration has no more elements</div><div class="line"> * &#125;</div><div class="line"> * Definition of Document:</div><div class="line"> * class Document &#123;</div><div class="line"> * public:</div><div class="line"> *     int id; // document id</div><div class="line"> *     string content; // document content</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopKFrequentWordsMapper</span>:</span> <span class="keyword">public</span> Mapper &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Map</span><span class="params">(Input&lt;Document&gt;* input)</span> </span>&#123;</div><div class="line">        <span class="comment">// Write your code here</span></div><div class="line">        <span class="comment">// Please directly use func 'output' to output </span></div><div class="line">        <span class="comment">// the results into output buffer.</span></div><div class="line">        <span class="comment">// void output(string &amp;key, int value);</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (!input-&gt;done())</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> s = input-&gt;value().content;</div><div class="line">            <span class="keyword">int</span> st = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> en = <span class="number">0</span>; en &lt;= s.length(); ++en)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (en == s.length() || s[en] == <span class="string">' '</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (en &gt; st)</div><div class="line">                    &#123;</div><div class="line">                    <span class="built_in">string</span> tmp = s.substr(st,en-st);</div><div class="line">                        output(tmp,<span class="number">1</span>); </div><div class="line">                    &#125;</div><div class="line">                    st = en+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            input-&gt;next();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mycomparison</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &amp;a,<span class="keyword">const</span> pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &amp;b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (a.second &lt; b.second)</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> (a.second &gt; b.second)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> (a.first &gt; b.first);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopKFrequentWordsReducer</span>:</span> <span class="keyword">public</span> Reducer &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> K;</div><div class="line">    priority_queue&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt;,mycomparison&gt; qu;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="comment">// initialize your data structure here</span></div><div class="line">        K = k;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reduce</span><span class="params">(<span class="built_in">string</span> &amp;key, Input&lt;<span class="keyword">int</span>&gt;* input)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!input-&gt;done())</div><div class="line">        &#123;</div><div class="line">            sum += input-&gt;value();</div><div class="line">            input-&gt;next();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        qu.push(make_pair(key,sum));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Please directly use func 'output' to output </span></div><div class="line">        <span class="comment">// the top k pairs &lt;word, times&gt; into output buffer.</span></div><div class="line">        <span class="comment">// void output(string &amp;key, int &amp;value);</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K &amp;&amp; !qu.empty(); ++i)</div><div class="line">        &#123;</div><div class="line">            pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; cur = qu.top();</div><div class="line">            output(cur.first,cur.second);</div><div class="line">            qu.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Find top k frequent words with map reduce framework.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Map Reduce" scheme="https://suzyz.github.io/tags/Map-Reduce/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Maximum Gap</title>
    <link href="https://suzyz.github.io/2017/11/04/maximum-gap/"/>
    <id>https://suzyz.github.io/2017/11/04/maximum-gap/</id>
    <published>2017-11-04T11:59:56.000Z</published>
    <updated>2017-11-04T12:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given an unsorted array of N integers, find the maximum difference between the successive elements in its sorted form.</p><a id="more"></a><h1 id="Solution-1-O-NlogN-time"><a href="#Solution-1-O-NlogN-time" class="headerlink" title="Solution 1: O(NlogN) time"></a>Solution 1: O(NlogN) time</h1><p>Sort the array with quick sort, merge sort or heap sort. Then iterate through the array.</p><h1 id="Solution-2-O-N-time"><a href="#Solution-2-O-N-time" class="headerlink" title="Solution 2: O(N) time"></a>Solution 2: O(N) time</h1><p>We know that bucket sort only takes O(N) time to allocate the numbers to buckets. If we make sure that the size of each bucket is small enough, we can save us the trouble of gathering the numbers from buckets.</p><p>Actually, once we notice that the lower limit of the answer is L = (max - min)/(N-1), we can set the bucket size to ceil(L) (L rounds up to ceil(l)). Then the maximum difference between numbers in one bucket is at most ceil(L)-1, which is smaller than the answer we want. So we only need to consider the differences of numbers in different buckets. To implement this, we can iterate through each non-empty buckets, and for two adjacent non-empty buckets A and B, we update the answer with the difference between the minimum in B and the maximum in A, i.e. min(B) - max(A).</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: an array of integers</div><div class="line">     * @return: the maximun difference</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumGap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> minv = nums[<span class="number">0</span>], maxv = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">        minv = min(minv,nums[i]);</div><div class="line">        maxv = max(maxv,nums[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (minv == maxv)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">ceil</span>(<span class="number">1.0</span> * (maxv - minv) / (n<span class="number">-1</span>));</div><div class="line">        <span class="keyword">int</span> m = <span class="built_in">ceil</span>(<span class="number">1.0</span> * (maxv - minv) / len) + <span class="number">1</span>;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; buckets[m];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">int</span> cur = (nums[i] - minv)/len;</div><div class="line">        buckets[cur].insert(nums[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> is_first = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">int</span> last = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">if</span> (buckets[i].size() == <span class="number">0</span>)</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (is_first)</div><div class="line">        is_first = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        ans = max(ans, *buckets[i].begin() - *buckets[last].rbegin());</div><div class="line">        </div><div class="line">        last = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given an unsorted array of N integers, find the maximum difference between the successive elements in its sorted form.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Bucket Sort" scheme="https://suzyz.github.io/tags/Bucket-Sort/"/>
    
      <category term="Sort" scheme="https://suzyz.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Median of Two Sorted Arrays</title>
    <link href="https://suzyz.github.io/2017/11/04/median-of-two-sorted-arrays/"/>
    <id>https://suzyz.github.io/2017/11/04/median-of-two-sorted-arrays/</id>
    <published>2017-11-04T11:09:47.000Z</published>
    <updated>2017-11-04T11:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given two sorted arrays A and B of size m and n respectively, find the median of the two sorted arrays.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Apparently, we can merge A and B to get a new sorted array C. Then the answer is the median of C.<br>The time and space complexities are both O(M+N), so let us think about better solutions.</p><p>Suppose M+N is odd, then finding the median of C is actually finding the ((M+N+1)/2)th number of C. So we need a way to find the kth number of C in less than linear time, which leads us to think about algorithms with O(log(M+N)) time complexity, such as binary search.</p><p>The point of binary search is to cut the search range by half each time, I think. But can we do the same thing in this problem? To answer this question, let us look at A[k/2-1] and B[k/2-1], which we use M1 and M2 to denote respectively.</p><p>In array A, there are k/2-1 numbers smaller than M1, and m-k/2 numbers greater than it. The situation is similar for B and M2. So, if M1 and M2 are equal, there are exactly k-1 numbers in C smaller or equal to M1. Thus M1 is the kth number of C. If M1 &lt; M2, there are less than k-2 numbers in C smaller than M1; therefore, we know M1 and any number smaller than it are not the target we want. So it is safe for us to throw the first k/2 numbers of A out of consideration. The approach is similar when M1 &gt; M2.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param A: An integer array</div><div class="line">     * @param B: An integer array</div><div class="line">     * @return: a double whose format is *.5 or *.0</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tot = A.size() + B.size();</div><div class="line">    <span class="keyword">if</span> (tot == <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> m = A.size(), n = B.size();</div><div class="line">    <span class="keyword">if</span> (tot%<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> find_kth(<span class="number">0</span>,m,A,<span class="number">0</span>,n,B,tot/<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * (find_kth(<span class="number">0</span>,m,A,<span class="number">0</span>,n,B,tot/<span class="number">2</span>) + find_kth(<span class="number">0</span>,m,A,<span class="number">0</span>,n,B,tot/<span class="number">2</span>+<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_kth</span><span class="params">(<span class="keyword">int</span> base1,<span class="keyword">int</span> len1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> base2, <span class="keyword">int</span> len2, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B, <span class="keyword">int</span> k)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (len1 &gt; len2)</div><div class="line">            <span class="keyword">return</span> find_kth(base2,len2,B,base1,len1,A,k);</div><div class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> B[base2 + k<span class="number">-1</span>];</div><div class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> min(A[base1],B[base2]);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> half1 = min(k/<span class="number">2</span>, len1);</div><div class="line">        <span class="keyword">int</span> half2 = k - half1;</div><div class="line">        <span class="keyword">if</span> (A[base1 + half1 - <span class="number">1</span>] == B[base2 + half2 - <span class="number">1</span>])</div><div class="line">            <span class="keyword">return</span> A[base1 + half1 - <span class="number">1</span>];</div><div class="line">        <span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> (A[base1 + half1 - <span class="number">1</span>] &lt; B[base2 + half2 - <span class="number">1</span>])</div><div class="line">            <span class="keyword">return</span> find_kth(base1 + half1, len1 - half1, A, base2,len2,B, k - half1);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> find_kth(base1,len1,A, base2 + half2, len2 - half2, B, k - half2);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given two sorted arrays A and B of size m and n respectively, find the median of the two sorted arrays.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="Array" scheme="https://suzyz.github.io/tags/Array/"/>
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Binary Search" scheme="https://suzyz.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Longest Increasing Subsequence</title>
    <link href="https://suzyz.github.io/2017/10/31/longest-increasing-subsequence/"/>
    <id>https://suzyz.github.io/2017/10/31/longest-increasing-subsequence/</id>
    <published>2017-10-31T12:37:13.000Z</published>
    <updated>2017-10-31T13:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a sequence of integers, find the length of the longest increasing subsequence (LIS).</p><a id="more"></a><h1 id="Solution-1-DP-O-N-2-time"><a href="#Solution-1-DP-O-N-2-time" class="headerlink" title="Solution 1: DP, O(N^2) time"></a>Solution 1: DP, O(N^2) time</h1><p>Let us denote the given array with A[1], A[2], …, A[N].</p><p>Define f[i] as the length of the LIS ending at A[i]. So we have</p><blockquote><p>f[i] = max{f[j]} + 1 , where j &lt; i and A[j] &lt; A[i]</p></blockquote><p>The answer is max{f[i]}, i = 1,2,…,N. This method takes O(N^2) time and O(N) space.</p><h1 id="Solution-2-DP-Binary-Search-O-NlogN-time"><a href="#Solution-2-DP-Binary-Search-O-NlogN-time" class="headerlink" title="Solution 2: DP + Binary Search, O(NlogN) time"></a>Solution 2: DP + Binary Search, O(NlogN) time</h1><p>Define g[i] as the minimal ending number of all increasing subsequences whose length are i.</p><p>Naturally, we realize that g[i] is non-decreasing, which means we can use binary search on it.</p><p>Plus, if g[l] has a legal value, the answer L is equal to or greater than l.That is, L = max{l}, where g[l] has a legal value.</p><p>These thoughts lead to the following algorithm:</p><p>First, we initialize g[1] with A[1] and L with 1.</p><p>Then we iterate through the array. For each i,</p><ol><li>If A[i] &gt; g[L], it is a great thing because we can now increase L by 1. For new L, we let g[L] = A[i].</li><li>If A[i] == g[L], A[i] is not helpful so we continue.</li><li>If A[i] &lt; g[L], we use binary search to find an index k, such that g[k-1] &lt; A[i] &le; g[k]. (We suppose g[0] is INT_MIN, so there will always be a legal k.) Then we use A[i] to update g[k].</li></ol><p>This method has a lower time complexity, but also requires more thinking.</p><h1 id="Code-for-Soluton-2"><a href="#Code-for-Soluton-2" class="headerlink" title="Code for Soluton 2"></a>Code for Soluton 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: An integer array</div><div class="line">     * @return: The length of LIS (longest increasing subsequence)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingSubsequence</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line">    <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> f[n+<span class="number">2</span>];</div><div class="line">    f[<span class="number">1</span>] = nums[<span class="number">0</span>];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">if</span> (nums[i] &gt; f[len])</div><div class="line">    f[++len] = nums[i];</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> (nums[i] == f[len])</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">int</span> pos = binary_search(nums[i],len,f);</div><div class="line">    f[pos] = nums[i];</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> size,<span class="keyword">int</span> *f)</span> <span class="comment">/* return k, s.t. f[k-1] &lt; cur &lt;= f[k] */</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = size;</div><div class="line">    <span class="keyword">while</span> (l&lt;r)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">int</span> mid = l + ((r-l)&gt;&gt;<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (f[mid] == cur)</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> (f[mid] &lt; cur)</div><div class="line">    l = mid+<span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    r = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> l;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a sequence of integers, find the length of the longest increasing subsequence (LIS).&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://suzyz.github.io/tags/LeetCode/"/>
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="DP" scheme="https://suzyz.github.io/tags/DP/"/>
    
      <category term="Binary Search" scheme="https://suzyz.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Maximum Subarry II; Maximum Subarray Difference</title>
    <link href="https://suzyz.github.io/2017/10/30/maximum-subarry2-and-maximum-subarray-difference/"/>
    <id>https://suzyz.github.io/2017/10/30/maximum-subarry2-and-maximum-subarray-difference/</id>
    <published>2017-10-30T13:06:44.000Z</published>
    <updated>2017-10-30T14:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><h2 id="Problem-1-Maximum-Subarray-II"><a href="#Problem-1-Maximum-Subarray-II" class="headerlink" title="Problem 1: Maximum Subarray II"></a>Problem 1: Maximum Subarray II</h2><p>Given an array of integers, find two non-overlapping subarrays which have the largest sum. The subarray should contain at least one number and the numbers in each subarray should be contiguous. </p><h2 id="Problem-2-Maximum-Subarray-Difference"><a href="#Problem-2-Maximum-Subarray-Difference" class="headerlink" title="Problem 2: Maximum Subarray Difference"></a>Problem 2: Maximum Subarray Difference</h2><p>Given an array of integers, find two non-overlapping subarrays A and B, such that |SUM(A) - SUM(B)| is the largest.<br>The subarray should contain at least one number and the numbers in each subarray should be contiguous.<br>Calculate the largest difference.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1:"></a>Problem 1:</h2><p>Let us denote the given array with A[0]A[1]…A[N-1].<br>Define</p><ol><li>f[i] as the maximal sum of subarray ending at i or before i,</li><li>g[i] as the maximal sum of two subarrays of which the second one ends at i.</li></ol><p>So the answer is max{g[i]}, i = 0,1,…,N-1.</p><p>If we use min_sum to indicate the minimum cumulative sum before i, we have</p><blockquote><p>f[i] = max{f[i-1], cur_sum - min_sum}<br>g[i] = max{g[i-1], f[i-1]} + A[i]</p></blockquote><p>The time complexity is O(N); the space complexity is O(1), since we only need f[i-1] and g[i-1], instead of f[0]…f[i-1] and g[0]…g[i-1], when we calculate f[i] and g[i].</p><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2:"></a>Problem 2:</h2><p>This is easier after we solved problem 1.</p><p>Define</p><ol><li>f[i][0] as the maximal sum of subarray ending at i or before i,</li><li>f[i][1] as the minimal sum of subarray ending at i or before i,</li><li>g[i][0] as the maximal difference of two subarrays of which the second one ends at i.</li><li>g[i][1] as the minimal difference of two subarrays of which the second one ends at i.</li></ol><p>So the answer is max{abs(g[i][j])}, i = 0,1,…,N-1, j = 0,1.</p><p>We have</p><blockquote><p>f[i][0] = max{f[i-1][0], cur_sum - min_sum}<br>f[i][1] = min{f[i-1][1], cur_sum - max_sum}<br>g[i][0] = max{g[i-1][0], -f[i-1][1]} + nums[i-1];<br>g[i][1] = min{g[i-1][1], -f[i-1][0]} + nums[i-1];</p></blockquote><p>The time complexity is O(N); the space complexity is O(1).</p><h1 id="Code-1-Maximum-Subarray-II-O-1-space"><a href="#Code-1-Maximum-Subarray-II-O-1-space" class="headerlink" title="Code 1: Maximum Subarray II, O(1) space"></a>Code 1: Maximum Subarray II, O(1) space</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: A list of integers</div><div class="line">     * @return: An integer denotes the sum of max two non-overlapping subarrays</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxTwoSubArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> f[<span class="number">2</span>], g[<span class="number">2</span>], sum = <span class="number">0</span>, min_sum = <span class="number">0</span>, ans = INT_MIN;</div><div class="line">        f[<span class="number">0</span>] = g[<span class="number">0</span>] = INT_MIN/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">        sum += nums[i<span class="number">-1</span>];</div><div class="line">        f[flag] = max(f[<span class="number">1</span>-flag],sum - min_sum);</div><div class="line"></div><div class="line">        min_sum = min(min_sum,sum);</div><div class="line"></div><div class="line">        g[flag] = max(g[<span class="number">1</span>-flag],f[<span class="number">1</span>-flag]) + nums[i<span class="number">-1</span>];</div><div class="line">        ans = max(ans,g[flag]);</div><div class="line"></div><div class="line">            flag = <span class="number">1</span>-flag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-2-Maximum-Subarray-II-O-N-space"><a href="#Code-2-Maximum-Subarray-II-O-N-space" class="headerlink" title="Code 2: Maximum Subarray II, O(N) space"></a>Code 2: Maximum Subarray II, O(N) space</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: A list of integers</div><div class="line">     * @return: An integer denotes the sum of max two non-overlapping subarrays</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxTwoSubArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> f[n+<span class="number">2</span>], g[n+<span class="number">2</span>], sum = <span class="number">0</span>, min_sum = <span class="number">0</span>, ans = INT_MIN;</div><div class="line">        f[<span class="number">0</span>] = g[<span class="number">0</span>] = INT_MIN/<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">        sum += nums[i<span class="number">-1</span>];</div><div class="line">        f[i] = max(f[i<span class="number">-1</span>],sum - min_sum);</div><div class="line"></div><div class="line">        min_sum = min(min_sum,sum);</div><div class="line"></div><div class="line">        g[i] = max(g[i<span class="number">-1</span>],f[i<span class="number">-1</span>]) + nums[i<span class="number">-1</span>];</div><div class="line">        ans = max(ans,g[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span>  ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-3-Maximum-Subarray-Difference"><a href="#Code-3-Maximum-Subarray-Difference" class="headerlink" title="Code 3: Maximum Subarray Difference"></a>Code 3: Maximum Subarray Difference</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: A list of integers</div><div class="line">     * @return: An integer indicate the value of maximum difference between two substrings</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDiffSubArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line">    <span class="keyword">int</span> f[n+<span class="number">2</span>][<span class="number">2</span>],g[n+<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = g[<span class="number">0</span>][<span class="number">0</span>] = INT_MIN;</div><div class="line">    f[<span class="number">0</span>][<span class="number">1</span>] = g[<span class="number">0</span>][<span class="number">1</span>] = INT_MAX;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, min_sum = <span class="number">0</span>, max_sum = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    &#123;</div><div class="line">    sum += nums[i<span class="number">-1</span>];</div><div class="line">    f[i][<span class="number">0</span>] = max(f[i<span class="number">-1</span>][<span class="number">0</span>],sum - min_sum);</div><div class="line">    f[i][<span class="number">1</span>] = min(f[i<span class="number">-1</span>][<span class="number">1</span>],sum - max_sum);</div><div class="line"></div><div class="line">    min_sum = min(sum,min_sum);</div><div class="line">    max_sum = max(sum,max_sum);</div><div class="line"></div><div class="line">    g[i][<span class="number">0</span>] = max(g[i<span class="number">-1</span>][<span class="number">0</span>], -f[i<span class="number">-1</span>][<span class="number">1</span>]) + nums[i<span class="number">-1</span>];</div><div class="line">    g[i][<span class="number">1</span>] = min(g[i<span class="number">-1</span>][<span class="number">1</span>], -f[i<span class="number">-1</span>][<span class="number">0</span>]) + nums[i<span class="number">-1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i&gt;<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">    ans = max(<span class="built_in">abs</span>(g[i][<span class="number">0</span>]), ans);</div><div class="line">    ans = max(<span class="built_in">abs</span>(g[i][<span class="number">1</span>]), ans);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;h2 id=&quot;Problem-1-Maximum-Subarray-II&quot;&gt;&lt;a href=&quot;#Problem-1-Maximum-Subarray-II&quot; class=&quot;headerlink&quot; title=&quot;Problem 1: Maximum Subarray II&quot;&gt;&lt;/a&gt;Problem 1: Maximum Subarray II&lt;/h2&gt;&lt;p&gt;Given an array of integers, find two non-overlapping subarrays which have the largest sum. The subarray should contain at least one number and the numbers in each subarray should be contiguous. &lt;/p&gt;
&lt;h2 id=&quot;Problem-2-Maximum-Subarray-Difference&quot;&gt;&lt;a href=&quot;#Problem-2-Maximum-Subarray-Difference&quot; class=&quot;headerlink&quot; title=&quot;Problem 2: Maximum Subarray Difference&quot;&gt;&lt;/a&gt;Problem 2: Maximum Subarray Difference&lt;/h2&gt;&lt;p&gt;Given an array of integers, find two non-overlapping subarrays A and B, such that |SUM(A) - SUM(B)| is the largest.&lt;br&gt;The subarray should contain at least one number and the numbers in each subarray should be contiguous.&lt;br&gt;Calculate the largest difference.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="DP" scheme="https://suzyz.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>LintCode /A + B Problem</title>
    <link href="https://suzyz.github.io/2017/10/30/a-plus-b-problem/"/>
    <id>https://suzyz.github.io/2017/10/30/a-plus-b-problem/</id>
    <published>2017-10-30T11:58:47.000Z</published>
    <updated>2017-10-30T12:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Write a function that add two numbers A and B without using “+” or any arithmetic operators.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Let x = a ^ b, y = (a&amp;b) &lt;&lt; 1. Then x contains the different digits of a and b. (a&amp;b) contains the same digits of a and b; y denotes the carrying digits. So when we add x and y, we get the sum of a and b.</p><p>So we use a while loop to implement the process. Each time we use x and y to replace a and b, respectively. When the carry is zero, we have got the answer.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param : An integer</div><div class="line">     * @param : An integer</div><div class="line">     * @return: The sum of a and b</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">aplusb</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (b)</div><div class="line">    &#123;</div><div class="line">    x = a^b;</div><div class="line">    y = (a&amp;b) &lt;&lt; <span class="number">1</span>;</div><div class="line"></div><div class="line">    a = x;</div><div class="line">    b = y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Write a function that add two numbers A and B without using “+” or any arithmetic operators.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Bit Manipulation" scheme="https://suzyz.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Longest Substring with At Most K Distinct Characters</title>
    <link href="https://suzyz.github.io/2017/10/27/longest-substring-with-at-most-k-distinct-characters/"/>
    <id>https://suzyz.github.io/2017/10/27/longest-substring-with-at-most-k-distinct-characters/</id>
    <published>2017-10-27T13:45:08.000Z</published>
    <updated>2017-10-28T14:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a string S and an integer K, find the length of the longest substring T that contains at most K distinct characters.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We can use two pointers, L and R, to mark the beginning and ending points of the current subsequence. Each time we greedily move R forward by 1, without breaking the rule that the substring contains at most K distinct characters. That is, if and only if the rule would not hold when R is moved forward, we move L forward too.</p><p>The time complexity is O(N).</p><p>Plus, there are some details with coding. In line 16 of the following code, if we replace the inequality with “r&lt;s.length()”, there will be errors. Because r is of type “int” and s.length() is of type “unsigned int”, r will be converted to type “unsigned int” for the comparison. -1 will be converted to 4294967295, which is the maximum of unsigned int.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param s: A string</div><div class="line">     * @param k: An integer</div><div class="line">     * @return: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstringKDistinct</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s.length() == <span class="number">0</span> || k &lt;= <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">-1</span>, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> total = <span class="number">0</span>, status[<span class="number">150</span>];</div><div class="line">    <span class="built_in">memset</span>(status,<span class="number">0</span>,<span class="keyword">sizeof</span>(status));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (r&lt;(<span class="keyword">int</span>)s.length())</div><div class="line">    &#123;</div><div class="line">    ans = max(ans,r-l+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r == s.length() - <span class="number">1</span>)</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    ++r;</div><div class="line">    <span class="keyword">if</span> (status[s[r]] == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">    ++total;</div><div class="line">    <span class="keyword">while</span> (total &gt; k)</div><div class="line">    &#123;</div><div class="line">    --status[s[l]];</div><div class="line">    <span class="keyword">if</span> (status[s[l]] == <span class="number">0</span>)</div><div class="line">    --total;</div><div class="line"></div><div class="line">    ++l;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ++status[s[r]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a string S and an integer K, find the length of the longest substring T that contains at most K distinct characters.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Greedy" scheme="https://suzyz.github.io/tags/Greedy/"/>
    
      <category term="String" scheme="https://suzyz.github.io/tags/String/"/>
    
      <category term="Two Pointers" scheme="https://suzyz.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Largest Rectangle in Histogram</title>
    <link href="https://suzyz.github.io/2017/10/23/largest-rectangle-in-histogram/"/>
    <id>https://suzyz.github.io/2017/10/23/largest-rectangle-in-histogram/</id>
    <published>2017-10-23T07:11:42.000Z</published>
    <updated>2017-10-30T11:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given N non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of the largest rectangle in the histogram.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>The plain O(N^2) solution is relatively easy to come up with. But can we make it faster?</p><p>Suppose we are calculating the area of the largest rectangle ending at ith bar.<br>If H[i-1] &gt; H[i], we do not need to remember the height of the (i-1)th bar. Because the (i-1)th bar would not limit the height of the rectangle, it is not helpful to the calculation.<br>Similiarly, if H[i-1] &gt; H[i] and H[i-2] &gt; H[i-1], we do not need to remember H[i-2] and H[i-1].</p><p>So, actually we want to keep a non-decreasing sequence of bars.</p><p>The stack is perfect for implementing this.</p><p>First, we need to insert two bars with 0 height into the beginning and the end of the histogram, to ensure the situations where the rectangles containing the first or the last bar are calculated. And we push the first bar into the stack.</p><p>Then, we iterate through the rest bars. If the bar on the top of the stack has a height bigger than the current bar, we pop it out and calculate the areas of the rectangles ending at it. We keep doing this until the bar on the top of the stack is lower than the current bar.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param height: A list of integer</div><div class="line">     * @return: The area of largest rectangle in the histogram</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;height)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = height.size(), ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        height.insert(height.begin(),<span class="number">0</span>);</div><div class="line">        height.push_back(<span class="number">0</span>);</div><div class="line">        n += <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">        st.push(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">1</span>; idx &lt; n; ++idx)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (height[st.top()] &gt; height[idx])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> first = st.top();</div><div class="line">                <span class="keyword">int</span> last = first;</div><div class="line">                <span class="keyword">while</span> (!st.empty() &amp;&amp; height[st.top()] &gt; height[idx])</div><div class="line">                &#123;</div><div class="line">                    first = st.top();</div><div class="line">                    st.pop();</div><div class="line">                    ans = max(ans,height[first] * (last - st.top()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            st.push(idx);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given N non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of the largest rectangle in the histogram.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Stack" scheme="https://suzyz.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Word Search II</title>
    <link href="https://suzyz.github.io/2017/10/22/word-search2/"/>
    <id>https://suzyz.github.io/2017/10/22/word-search2/</id>
    <published>2017-10-22T11:07:15.000Z</published>
    <updated>2017-10-22T11:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a matrix of lower alphabets and a dictionary, find all words in the dictionary that can be found in the matrix. A word can start from any position in the matrix and go left/right/up/down to the adjacent position.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>First, we use Trie to record the words in the dictionary.</p><p>Second, we iterate the indices of the starting position of strings. For each (i,j), if there are words beginning with matrix[i][j], we use BFS to search for all possible words starting here. During the search, we can greatly cut the search tree with the help of the Trie we built.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c;</div><div class="line"><span class="keyword">bool</span> is_word;</div><div class="line"><span class="keyword">int</span> idx;</div><div class="line">Node *p[<span class="number">26</span>];</div><div class="line">Node() &#123; idx = <span class="number">0</span>; is_word = <span class="literal">false</span>; <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p)); &#125;</div><div class="line">Node(<span class="keyword">char</span> c1)</div><div class="line">&#123;</div><div class="line">c = c1;</div><div class="line">idx = <span class="number">0</span>;</div><div class="line">is_word = <span class="literal">false</span>;</div><div class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">Node *root;</div><div class="line">Trie() &#123; root = <span class="keyword">new</span> Node; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;w,<span class="keyword">int</span> idx)</span></span></div><div class="line">&#123;</div><div class="line">Node *cur = root;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w.length(); ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c = w[i]-<span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (!cur-&gt;p[c])</div><div class="line">cur-&gt;p[c] = <span class="keyword">new</span> Node(c);</div><div class="line">cur = cur-&gt;p[c];</div><div class="line">&#125;</div><div class="line">cur-&gt;is_word = <span class="literal">true</span>;</div><div class="line">cur-&gt;idx = idx;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Status</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line">Node *ptr;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; used;</div><div class="line"></div><div class="line">Status(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,Node *p1,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;u)</div><div class="line">&#123;</div><div class="line">x = x1; y = y1; ptr = p1; used = u;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,Node *p1,<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;board,<span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">queue</span>&lt;Status&gt; q;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; u(n*m,<span class="number">0</span>);</div><div class="line">u[x*m+y] = <span class="literal">true</span>;</div><div class="line"><span class="function">Status <span class="title">init</span><span class="params">(x,y,p1,u)</span></span>;</div><div class="line"></div><div class="line">q.push(init);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">Status cur = q.front();</div><div class="line">q.pop();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (cur.ptr-&gt;is_word)</div><div class="line">res.insert(words[cur.ptr-&gt;idx]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> tx = cur.x + dir[i][<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span> (tx &lt; <span class="number">0</span> || tx &gt;= n)</div><div class="line"><span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> ty = cur.y + dir[i][<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span> (ty &lt; <span class="number">0</span> || ty &gt;= m || cur.used[tx*m+ty])</div><div class="line"><span class="keyword">continue</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!cur.ptr-&gt;p[board[tx][ty]-<span class="string">'a'</span>])</div><div class="line"><span class="keyword">continue</span>;</div><div class="line"></div><div class="line"><span class="function">Status <span class="title">next</span><span class="params">(tx,ty,cur.ptr-&gt;p[board[tx][ty]-<span class="string">'a'</span>],cur.used)</span></span>;</div><div class="line">next.used[tx*m+ty] = <span class="literal">true</span>;</div><div class="line">q.push(next);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">     * @param board: A list of lists of character</div><div class="line">     * @param words: A list of string</div><div class="line">     * @return: A list of string</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; wordSearchII(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;board, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words) &#123;</div><div class="line">    <span class="keyword">int</span> n = board.size();</div><div class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;();</div><div class="line"></div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line"></div><div class="line">    Trie trie;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.size(); ++i)</div><div class="line">    trie.insert(words[i],i);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> m = board[<span class="number">0</span>].size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">    <span class="keyword">if</span> (trie.root-&gt;p[board[i][j]-<span class="string">'a'</span>])</div><div class="line">    bfs(i,j,trie.root-&gt;p[board[i][j]-<span class="string">'a'</span>],n,m,board,res,words);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a matrix of lower alphabets and a dictionary, find all words in the dictionary that can be found in the matrix. A word can start from any position in the matrix and go left/right/up/down to the adjacent position.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Trie" scheme="https://suzyz.github.io/tags/Trie/"/>
    
      <category term="BFS" scheme="https://suzyz.github.io/tags/BFS/"/>
    
  </entry>
  
</feed>
