<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suzy Zhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suzyz.github.io/"/>
  <updated>2017-10-13T10:16:35.000Z</updated>
  <id>https://suzyz.github.io/</id>
  
  <author>
    <name>Suzy Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LintCode/Reorder List</title>
    <link href="https://suzyz.github.io/2017/10/13/reorder-list/"/>
    <id>https://suzyz.github.io/2017/10/13/reorder-list/</id>
    <published>2017-10-13T09:37:10.000Z</published>
    <updated>2017-10-13T10:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a singly linked list L : L[0] -&gt; L[1] -&gt; … -&gt; L[N-1] -&gt; L[N].<br>Reorder it to : L[0] -&gt; L[N] -&gt; L[1] -&gt; L[N-1] -&gt; L[2] -&gt; L[N-2] -&gt; …</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>First, we find the middle node of list L.<br>We can use two pointers, fast and slow, both initialized with head pointer of list L, to find the middle node in one-pass. Every time the slow pointer moves one step, the fast pointer moves two step. So when the fast pointer or its next reaches the end, the slow pointer is at the middle node.</p><p>Second, we cut list L into two halves, L1 and L2. L1 ends at the middle node and L2 starts at the next node of the middle node. Then we reverse L2, and we use L3 to denote the reversed list.</p><p>Third, we merge L1 and L3.</p><p>The time and space complexities are O(N) and O(1), respectively.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverse_list</span><span class="params">(ListNode * head)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line"></div><div class="line">        ListNode *p = head, *q = head-&gt;next, *tmp;</div><div class="line">        <span class="keyword">while</span> (p &amp;&amp; q)</div><div class="line">        &#123;</div><div class="line">            tmp = q-&gt;next;</div><div class="line">            q-&gt;next = p;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (p == head)</div><div class="line">                p-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">            p = q;</div><div class="line">            q = tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode * head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        ListNode *fast = head,*slow = head;</div><div class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            slow = slow-&gt;next;</div><div class="line">            fast = fast-&gt;next-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode *latter = slow-&gt;next;</div><div class="line">        slow-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">        latter = reverse_list(latter);</div><div class="line"></div><div class="line">        fast = head;</div><div class="line">        ListNode *tmp1,*tmp2;</div><div class="line">        <span class="keyword">while</span> (fast &amp;&amp; latter)</div><div class="line">        &#123;</div><div class="line">            tmp1 = fast-&gt;next;</div><div class="line">            fast-&gt;next = latter;</div><div class="line">            tmp2 = latter-&gt;next;</div><div class="line">            fast = latter-&gt;next = tmp1;</div><div class="line">            latter = tmp2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a singly linked list L : L[0] -&amp;gt; L[1] -&amp;gt; … -&amp;gt; L[N-1] -&amp;gt; L[N].&lt;br&gt;Reorder it to : L[0] -&amp;gt; L[N] -&amp;gt; L[1] -&amp;gt; L[N-1] -&amp;gt; L[2] -&amp;gt; L[N-2] -&amp;gt; …&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Linked List" scheme="https://suzyz.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Copy List With Random Pointer</title>
    <link href="https://suzyz.github.io/2017/10/13/copy-list-with-random-pointer/"/>
    <id>https://suzyz.github.io/2017/10/13/copy-list-with-random-pointer/</id>
    <published>2017-10-13T04:12:01.000Z</published>
    <updated>2017-10-13T09:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p><p>Return a deep copy of the list.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>First, we make a copy of each node and insert it right after the original node.</p><p>Then, we need to find the “random” pointers for the new nodes.<br>Suppose we have a node p, whose random pointer points to node q, i.e. p-&gt;random == q. And after the copying, we have p-&gt;next == p2, q-&gt;next == q2. Then the random pointer of q1 should be q2. So we let p-&gt;next-&gt;random = p-&gt;random-&gt;next.</p><p>Finally, we break the linked list into two lists, the original one and the copy of it.</p><p>The time complexity is O(N), where N is the length of the linked list.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list with a random pointer.</div><div class="line"> * struct RandomListNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     RandomListNode *next, *random;</div><div class="line"> *     RandomListNode(int x) : label(x), next(NULL), random(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param head: The head of linked list with a random pointer.</div><div class="line">     * @return: A new head of a deep copy of the list.</div><div class="line">     */</div><div class="line">    <span class="function">RandomListNode *<span class="title">copyRandomList</span><span class="params">(RandomListNode *head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        RandomListNode *p = head,*tmp;</div><div class="line">        <span class="keyword">while</span> (p)</div><div class="line">        &#123;</div><div class="line">        tmp = p-&gt;next;</div><div class="line">        p-&gt;next = <span class="keyword">new</span> RandomListNode(p-&gt;label);</div><div class="line">        p-&gt;next-&gt;next = tmp;</div><div class="line">        p = p-&gt;next-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        p = head;</div><div class="line">        <span class="keyword">while</span> (p)</div><div class="line">        &#123;</div><div class="line">     <span class="keyword">if</span> (p-&gt;random == <span class="literal">NULL</span>)</div><div class="line">     p-&gt;next-&gt;random = <span class="literal">NULL</span>;</div><div class="line">     <span class="keyword">else</span></div><div class="line">        p-&gt;next-&gt;random = p-&gt;random-&gt;next;</div><div class="line">        p = p-&gt;next-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        RandomListNode *res = head-&gt;next;</div><div class="line">        p = head;</div><div class="line">        <span class="keyword">while</span> (p &amp;&amp; p-&gt;next)</div><div class="line">        &#123;</div><div class="line">            tmp = p-&gt;next;</div><div class="line">            p-&gt;next = p-&gt;next-&gt;next;</div><div class="line">            p = tmp;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.&lt;/p&gt;
&lt;p&gt;Return a deep copy of the list.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Linked List" scheme="https://suzyz.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Sort List</title>
    <link href="https://suzyz.github.io/2017/10/11/sort-list/"/>
    <id>https://suzyz.github.io/2017/10/11/sort-list/</id>
    <published>2017-10-11T15:21:46.000Z</published>
    <updated>2017-10-11T15:41:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Sort a linked list in O(NlogN) time using constant space complexity.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>I tried merge sort and quick sort. The merge sort worked perfectly, but the quick sort got TLE(time limit exceeded) for some cases.</p><p>When the given list is already ascending or almost in order, the time complexity of quick sort would grow to O(N^2). I haven’t found a way to optimize it yet. If you have any suggestions or would like to discuss with me, please leave a comment or email me, thanks in advance!</p><h1 id="Code-1-Merge-Sort-1"><a href="#Code-1-Merge-Sort-1" class="headerlink" title="Code 1 -  Merge Sort 1"></a>Code 1 -  Merge Sort 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">     <span class="keyword">int</span> val;</div><div class="line">     ListNode *next;</div><div class="line">     ListNode(<span class="keyword">int</span> val) &#123;</div><div class="line">         <span class="keyword">this</span>-&gt;val = val;</div><div class="line">         <span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param head: The head of linked list.</div><div class="line">     * @return: You should return the head of the sorted linked list, using constant space complexity.</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="function">ListNode * <span class="title">merge</span><span class="params">(ListNode *l,ListNode *r)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (l == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> r;</div><div class="line"><span class="keyword">if</span> (r == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> l;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (l-&gt;val &lt; r-&gt;val)</div><div class="line">&#123;</div><div class="line">l-&gt;next = merge(l-&gt;next,r);</div><div class="line"><span class="keyword">return</span> l;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">r-&gt;next = merge(l,r-&gt;next);</div><div class="line"><span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function">ListNode * <span class="title">sortList</span><span class="params">(ListNode * head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">        ListNode *pre = head, *l = head, *r = head;</div><div class="line"><span class="keyword">while</span> (r != <span class="literal">NULL</span> &amp;&amp; r-&gt;next != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">pre = l;</div><div class="line">l = l-&gt;next;</div><div class="line">r = r-&gt;next-&gt;next;</div><div class="line">&#125;</div><div class="line">pre-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> merge(sortList(head),sortList(l));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-2-Merge-Sort-2"><a href="#Code-2-Merge-Sort-2" class="headerlink" title="Code 2 - Merge Sort 2"></a>Code 2 - Merge Sort 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of ListNode</div><div class="line"> * class ListNode &#123;</div><div class="line"> * public:</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int val) &#123;</div><div class="line"> *         this-&gt;val = val;</div><div class="line"> *         this-&gt;next = NULL;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param head: The head of linked list.</div><div class="line">     * @return: You should return the head of the sorted linked list, using constant space complexity.</div><div class="line">     */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_free</span><span class="params">(ListNode *p)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (p==<span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span>;</div><div class="line">set_free(p-&gt;next);</div><div class="line"><span class="keyword">delete</span> p;</div><div class="line">&#125;</div><div class="line"><span class="function">ListNode * <span class="title">merge</span><span class="params">(ListNode *l,ListNode *r)</span></span></div><div class="line">&#123;</div><div class="line">ListNode *p = l, *q = r;</div><div class="line">ListNode *res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">ListNode *head = res;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (p!= <span class="literal">NULL</span> &amp;&amp; q!= <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (p-&gt;val &lt; q-&gt;val)</div><div class="line">&#123;</div><div class="line">res-&gt;next = <span class="keyword">new</span> ListNode(p-&gt;val);</div><div class="line">p = p-&gt;next;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">res-&gt;next = <span class="keyword">new</span> ListNode(q-&gt;val);</div><div class="line">q = q-&gt;next;</div><div class="line">&#125;</div><div class="line">res = res-&gt;next;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">res-&gt;next = <span class="keyword">new</span> ListNode(p-&gt;val);</div><div class="line">res = res-&gt;next;</div><div class="line">p = p-&gt;next;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (q!=<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">res-&gt;next = <span class="keyword">new</span> ListNode(q-&gt;val);</div><div class="line">res = res-&gt;next;</div><div class="line">q = q-&gt;next;</div><div class="line">&#125;</div><div class="line"></div><div class="line">set_free(l);</div><div class="line">set_free(r);</div><div class="line"><span class="keyword">return</span> head-&gt;next;</div><div class="line">&#125;</div><div class="line"><span class="function">ListNode * <span class="title">merge_sort</span><span class="params">(ListNode *head,<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (n&lt;=<span class="number">1</span>)</div><div class="line"><span class="keyword">return</span> head;</div><div class="line"></div><div class="line">ListNode *pre = head, *mid = head;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; ++i)</div><div class="line">&#123;</div><div class="line">pre = mid;</div><div class="line">mid = mid-&gt;next;</div><div class="line">&#125;</div><div class="line">pre-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">ListNode *l = merge_sort(head,n/<span class="number">2</span>);</div><div class="line">ListNode *r = merge_sort(mid,n-n/<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> merge(l,r);</div><div class="line">&#125;</div><div class="line">    <span class="function">ListNode * <span class="title">sortList</span><span class="params">(ListNode * head)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        ListNode *p = head;</div><div class="line">        <span class="keyword">while</span> (p)</div><div class="line">        &#123;</div><div class="line">        ++n;</div><div class="line">        p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> merge_sort(head,n);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-3-Quick-Sort"><a href="#Code-3-Quick-Sort" class="headerlink" title="Code 3 - Quick Sort"></a>Code 3 - Quick Sort</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param head: The head of linked list.</div><div class="line">     * @return: You should return the head of the sorted linked list, using constant space complexity.</div><div class="line">     */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_list_free</span><span class="params">(ListNode * head)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span>;</div><div class="line">set_list_free(head-&gt;next);</div><div class="line"><span class="keyword">delete</span> head;</div><div class="line">&#125;</div><div class="line">    <span class="function">ListNode * <span class="title">sortList</span><span class="params">(ListNode * head)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> v = head-&gt;val;</div><div class="line">        ListNode *left = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode *right = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode *p = left, *q = right;</div><div class="line">        ListNode *cur = head-&gt;next;</div><div class="line"></div><div class="line">       <span class="keyword">while</span>(cur)</div><div class="line">       &#123;</div><div class="line">       <span class="keyword">if</span> (cur-&gt;val &lt; v)</div><div class="line">       &#123;</div><div class="line">       p-&gt;next = <span class="keyword">new</span> ListNode(cur-&gt;val);</div><div class="line">       p = p-&gt;next;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span></div><div class="line">       &#123;</div><div class="line">       q-&gt;next = <span class="keyword">new</span> ListNode(cur-&gt;val);</div><div class="line">       q = q-&gt;next;</div><div class="line">       &#125;</div><div class="line">       cur = cur-&gt;next;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       set_list_free(head);</div><div class="line"></div><div class="line">       cur = sortList(left-&gt;next);</div><div class="line">       <span class="keyword">delete</span> left;</div><div class="line">       left = cur;</div><div class="line"></div><div class="line">       cur = sortList(right-&gt;next);</div><div class="line">       <span class="keyword">delete</span> right;</div><div class="line">       right = <span class="keyword">new</span> ListNode(v);</div><div class="line">right-&gt;next = cur;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (left == <span class="literal">NULL</span>)</div><div class="line">       <span class="keyword">return</span> right;</div><div class="line"></div><div class="line">        ListNode *pre = left;</div><div class="line">        cur = left;</div><div class="line">        <span class="keyword">while</span> (cur)</div><div class="line">        &#123;</div><div class="line">        pre = cur;</div><div class="line">        cur = cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">       pre-&gt;next = right;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Sort a linked list in O(NlogN) time using constant space complexity.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Sort" scheme="https://suzyz.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Gas Station</title>
    <link href="https://suzyz.github.io/2017/10/10/gas-station/"/>
    <id>https://suzyz.github.io/2017/10/10/gas-station/</id>
    <published>2017-10-10T04:50:02.000Z</published>
    <updated>2017-10-10T06:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</p><p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.</p><p>Find the index of the starting gas station if you can travel around the circuit once, otherwise return -1.<br>The solution is guaranteed to be unique.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Fisrt, let us use diff[i] to denote the amount of gas left if we go to station (i+1) from station i. Apparently, diff[i] = gas[i] - cost[i].</p><p>Let sum[i,j] = diff[i] + diff[i+1] + … + diff[j], total = sum[0,N-1].</p><p>If there is a feasible solution i, it should satisfy that</p><blockquote><p>sum[i,j] &ge; 0, j = i+1,i+2,…,N-1,0,1,…,i-1. &nbsp; &nbsp; &nbsp; &nbsp; (1)</p></blockquote><p>Apparently, there is no feasible solution if total is negative. But if total &ge; 0, can we say for sure that there is a solution?</p><p>Well, we can prove that</p><blockquote><p>if total &ge; 0, there exits an index i such that (1) holds. (2)</p></blockquote><p>So if total &ge; 0, there must be an answer. Now let us think greedily.<br>Suppose we begin the journey at j. If we find sum[j,j+k] &ge; 0, but sum[j,j+k+1] &lt; 0, then j is definitely not the answer. Actually, it is unnecessary to consider j+1, j+2, …, j+k+1, either. So we move to consider j’ = j+k+2.<br>In this way we can find the answer in O(N) time.</p><h2 id="Proof-of-2"><a href="#Proof-of-2" class="headerlink" title="Proof of (2)"></a>Proof of (2)</h2><p>Let’s assume that</p><blockquote><p>total &ge; 0 but (1) does not hold for any i, 0 &le; i &le; N-1. &nbsp;(3)</p></blockquote><p>The for 0 we have an index p[0] &gt; 0, s.t. sum[0,p[0]] &lt; 0. Since total &ge; 0, we know that p[0] &ne; N-1. Let us suppose p[0] is the first index that satisfies sum[0,i] &lt; 0.</p><p>Because of (3), there exits an index p[1] s.t. sum[p[0],p[1]] &lt; 0.<br>If 0 &le; p[1] &lt; p[0], we have sum[0,p[0]] + sum[p[0],p[1]] = total + sum[0,p[1]], hence sum[0,p[1]] &lt; 0. So p[0] &lt; p[1] &lt; N-1.</p><p>Similiarly, we can find infinite indices p[2],p[3],p[4],… s.t. p[0] &lt; p[1] &lt; p[2] &lt; p[3] &lt; …<br>But the diff array is finite. With this contradiction, we know that (3) is false, so (2) is true.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param gas: An array of integers</div><div class="line">     * @param cost: An array of integers</div><div class="line">     * @return: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;gas, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;cost)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = gas.size();</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> total = <span class="number">0</span>, sum = <span class="number">0</span>, st = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">int</span> cur = gas[i] - cost[i];</div><div class="line">        total += cur;</div><div class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">        sum = cur;</div><div class="line">        st = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        sum += cur;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> total &lt; <span class="number">0</span> ? <span class="number">-1</span> : st;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;There are N gas stations along a circular route, where the amount of gas at station i is gas[i].&lt;/p&gt;
&lt;p&gt;You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.&lt;/p&gt;
&lt;p&gt;Find the index of the starting gas station if you can travel around the circuit once, otherwise return -1.&lt;br&gt;The solution is guaranteed to be unique.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Greedy" scheme="https://suzyz.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank/Merge Sort/Counting Inversions</title>
    <link href="https://suzyz.github.io/2017/10/08/merge-sort-counting-inversions/"/>
    <id>https://suzyz.github.io/2017/10/08/merge-sort-counting-inversions/</id>
    <published>2017-10-08T09:16:27.000Z</published>
    <updated>2017-10-08T09:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given an array of N integers, calculate the number of swaps you need to perfom to sort the array in ascending order. You can only swap adjacent elements.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We use merge sort to solve this problem. During each merging process, we count the number of swaps. And we get the sum recursively.</p><p>Note that we can only swap adjacent elements. So moving an integer from position j to position i requires i-j swaps.</p><p>A trick for saving time :<br>We can use two arrays A and B, to store the data, and if this time we perfom the merge function from A to B, the next time we perfom it from B to A. In this way we do not have to copy the array every time.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">const int maxn = 100010;</div><div class="line"></div><div class="line">int n,arr[maxn],aux[maxn];</div><div class="line"></div><div class="line">long long merge(int (&amp;s)[maxn],int (&amp;t)[maxn],int st,int mid,int en)</div><div class="line">&#123;</div><div class="line">    int i = st, j = mid+1, idx = st;</div><div class="line">    long long res = 0;</div><div class="line">    while (i&lt;=mid &amp;&amp; j&lt;=en)</div><div class="line">    &#123;</div><div class="line">        if (s[i] &lt;= s[j])</div><div class="line">            t[idx++] = s[i++];</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            t[idx++] = s[j++];</div><div class="line">            res += mid+1 - i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (i&lt;=mid)</div><div class="line">    &#123;</div><div class="line">        t[idx++] = s[i++];</div><div class="line">    &#125;</div><div class="line">    while (j&lt;=en)</div><div class="line">    &#123;</div><div class="line">        t[idx++] = s[j++];</div><div class="line">    &#125;</div><div class="line">    return res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">long long merge_sort(int (&amp;s)[maxn],int (&amp;t)[maxn],int st,int en)</div><div class="line">&#123;</div><div class="line">    if (st &gt;= en)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    long long count = 0;</div><div class="line">    int mid = st + ((en-st)&gt;&gt;1);</div><div class="line">    count += merge_sort (t,s,st,mid);</div><div class="line">    count += merge_sort (t,s,mid+1,en);</div><div class="line"></div><div class="line">    count += merge(s,t,st,mid,en);</div><div class="line">    return count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    </div><div class="line">    int Q;</div><div class="line">    cin &gt;&gt; Q;</div><div class="line"></div><div class="line">while (Q--)</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    for (int i = 0; i &lt; n; ++i)</div><div class="line">    &#123;</div><div class="line">        cin &gt;&gt; arr[i];</div><div class="line">        aux[i] = arr[i];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    cout &lt;&lt; merge_sort(arr,aux,0,n-1) &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given an array of N integers, calculate the number of swaps you need to perfom to sort the array in ascending order. You can only swap adjacent elements.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="HackerRank" scheme="https://suzyz.github.io/tags/HackerRank/"/>
    
      <category term="Sort" scheme="https://suzyz.github.io/tags/Sort/"/>
    
      <category term="Merge Sort" scheme="https://suzyz.github.io/tags/Merge-Sort/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank/Heaps/Find the Running Median</title>
    <link href="https://suzyz.github.io/2017/10/07/heaps-find-the-running-median/"/>
    <id>https://suzyz.github.io/2017/10/07/heaps-find-the-running-median/</id>
    <published>2017-10-07T03:08:21.000Z</published>
    <updated>2017-10-07T07:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given N integers in order, for each ith integer, add it to a running list of integers, find the median of the updated list and print the median. (1 &le; N &le; 10^5)<br><a id="more"></a></p><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h1><p>The median is the number in the middle of a sorted list. It is unnecessary to sort the entire list to find the median. Instead, we can split the list into two groups of numbers, each containing about half of the list and the number in the first greater than the numbers in the other. Then we only need the biggest number of the first group and the smallest of the second group. </p><p>We can keep two heaps A and B , which have the following properties:</p><ol><li>A contains the bigger half of current list and A is a minimum heap.</li><li>B contains the smaller half of current list and B is a maximum heap. </li><li>The absolute difference between the sizes of A and B is less than 2. </li></ol><p>For each ith integer, nums[i], we push it into A, if A is empty or nums[i] &ge; A.top() . Else, we push it into B.<br>Then we balance the two heaps, making sure the property 3 still holds.<br>If i is odd, then the top of the bigger heap is the current median.<br>If i is even, then the average of the sum of the tops of A and B is the current median.</p><p>The time complexity is O(NlogN).</p><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h1><p>We can use a heap, or a binary search tree to store the list.<br>For each node i, we use a variable “sum” to denote the number of nodes in the subtree with i as root. With this we can find the nth number of the list in O(logN) time.</p><p>For each ith integer, we insert it into this BST, updating nodes along the way. Then, if i is odd, we find the (i+1)/2 th number in the list. Else, we find the i/2 th and the i/2+1 th number, and calculate the average.</p><p>The time complexity is also O(NlogN), but it might be harder to code.</p><h1 id="Code-for-Solution-1"><a href="#Code-for-Solution-1" class="headerlink" title="Code for Solution 1"></a>Code for Solution 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NumsHeap</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">bool</span> is_min_heap;</div><div class="line"><span class="keyword">int</span> size, nums[<span class="number">100010</span>];</div><div class="line">NumsHeap(<span class="keyword">bool</span> flag) &#123; is_min_heap = flag; size = <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size &gt; <span class="number">0</span> ? nums[<span class="number">1</span>] : <span class="number">-1</span>; &#125;</div><div class="line">&#125; min_heap(<span class="literal">true</span>), max_heap(<span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="keyword">void</span> NumsHeap::push(<span class="keyword">int</span> x)</div><div class="line">&#123;</div><div class="line">nums[++size] = x;</div><div class="line"></div><div class="line"><span class="keyword">int</span> i = size, j = i&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (j&gt;<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (is_min_heap ^ (nums[j] &gt; nums[i]))</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp;</div><div class="line">i = j;</div><div class="line">j = i&gt;&gt;<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> NumsHeap::pop()</div><div class="line">&#123;</div><div class="line">--size;</div><div class="line"><span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span>;</div><div class="line">nums[<span class="number">1</span>] = nums[size+<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = i&lt;&lt;<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (j&lt;=size)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (is_min_heap &amp;&amp; (nums[i] &lt;= nums[j] &amp;&amp; (j==size || (j&lt;size &amp;&amp; nums[i] &lt;= nums[j+<span class="number">1</span>]))))</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span> (!is_min_heap &amp;&amp; (nums[i] &gt;= nums[j] &amp;&amp; (j==size || (j&lt;size &amp;&amp; nums[i] &gt;= nums[j+<span class="number">1</span>]))))</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (j&lt;size &amp;&amp; (is_min_heap ^ (nums[j+<span class="number">1</span>] &gt; nums[j])))</div><div class="line">++j;</div><div class="line"><span class="keyword">int</span> tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp;</div><div class="line">i = j;</div><div class="line">j = i&lt;&lt;<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebalance</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (min_heap.size &gt; max_heap.size + <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">max_heap.push(min_heap.top());</div><div class="line">min_heap.pop();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">if</span> (max_heap.size &gt; min_heap.size + <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">min_heap.push(max_heap.top());</div><div class="line">max_heap.pop();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (min_heap.size == <span class="number">0</span> || j &gt;= min_heap.top())</div><div class="line">min_heap.push(j);</div><div class="line"><span class="keyword">else</span></div><div class="line">max_heap.push(j);</div><div class="line">rebalance();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (min_heap.size &gt; max_heap.size)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>,<span class="number">1.0</span> * min_heap.top());</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>,<span class="number">1.0</span> * max_heap.top());</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>,<span class="number">0.5</span> * (min_heap.top() + max_heap.top()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Code-for-Solution-2"><a href="#Code-for-Solution-2" class="headerlink" title="Code for Solution 2"></a>Code for Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> heap_size = <span class="number">0</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> sum,val,l,r;</div><div class="line">Node() &#123; sum = <span class="number">0</span>; val = l = r = <span class="number">-1</span>; &#125;</div><div class="line">&#125; nums_heap[<span class="number">100010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_node</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (heap_size == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">heap_size = <span class="number">1</span>;</div><div class="line">nums_heap[<span class="number">1</span>].sum = <span class="number">1</span>;</div><div class="line">nums_heap[<span class="number">1</span>].val = x;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i&gt;<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">++ nums_heap[i].sum;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (x &lt; nums_heap[i].val)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (nums_heap[i].l == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line">nums_heap[i].l = ++heap_size;</div><div class="line">i = nums_heap[i].l;</div><div class="line">nums_heap[i].sum = <span class="number">1</span>;</div><div class="line">nums_heap[i].val = x;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">i = nums_heap[i].l;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (nums_heap[i].r == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line">nums_heap[i].r = ++heap_size;</div><div class="line">i = nums_heap[i].r;</div><div class="line">nums_heap[i].sum = <span class="number">1</span>;</div><div class="line">nums_heap[i].val = x;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">i = nums_heap[i].r;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_nth</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i&gt;<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (nums_heap[i].l == <span class="number">-1</span> &amp;&amp; n==<span class="number">1</span>)</div><div class="line"><span class="keyword">return</span> nums_heap[i].val;</div><div class="line"><span class="keyword">if</span> (nums_heap[i].l != <span class="number">-1</span> &amp;&amp; n == nums_heap[nums_heap[i].l].sum +<span class="number">1</span>)</div><div class="line"><span class="keyword">return</span> nums_heap[i].val;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (nums_heap[i].l != <span class="number">-1</span> &amp;&amp; nums_heap[nums_heap[i].l].sum &gt;= n)</div><div class="line">&#123;</div><div class="line">i = nums_heap[i].l;</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (nums_heap[i].l != <span class="number">-1</span>)</div><div class="line">n = n - <span class="number">1</span> - nums_heap[nums_heap[i].l].sum;</div><div class="line"><span class="keyword">else</span></div><div class="line">--n;</div><div class="line"></div><div class="line">i = nums_heap[i].r;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</div><div class="line">insert_node(j);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (i&amp;<span class="number">1</span>)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>,<span class="number">1.0</span>*get_nth((i+<span class="number">1</span>)/<span class="number">2</span>));</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>,<span class="number">0.5</span>*(get_nth(i/<span class="number">2</span>)+get_nth(i/<span class="number">2</span>+<span class="number">1</span>)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given N integers in order, for each ith integer, add it to a running list of integers, find the median of the updated list and print the median. (1 &amp;le; N &amp;le; 10^5)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="HackerRank" scheme="https://suzyz.github.io/tags/HackerRank/"/>
    
      <category term="Heap" scheme="https://suzyz.github.io/tags/Heap/"/>
    
      <category term="Binary Search Tree" scheme="https://suzyz.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Delete Digits</title>
    <link href="https://suzyz.github.io/2017/10/04/delete-digits/"/>
    <id>https://suzyz.github.io/2017/10/04/delete-digits/</id>
    <published>2017-10-04T02:04:15.000Z</published>
    <updated>2017-10-04T02:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given string A representative a positive integer which has N digits, remove any k digits of the number, the remaining digits are arranged according to the original order to become a new positive integer.</p><p>Find the smallest integer after remove k digits. k &le; N &le; 240.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Removing k digits is actually choosing N-k digits to form a new integer.</p><p>Apparently, we should make the top digit minimal.<br>For any i, 0 &le; i &lt; N-k, we greedily choose the smallest digit in current range.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param A: A positive integer which has N digits, A is a string</div><div class="line">     * @param l: Remove k digits</div><div class="line">     * @return: A string</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">DeleteDigits</span><span class="params">(<span class="built_in">string</span> &amp;A, <span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">int</span> n = A.length();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> st = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-l; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k = st, en = l+i;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = st+<span class="number">1</span>; j &lt;= en; ++j)</div><div class="line">                <span class="keyword">if</span> (A[j]&lt;A[k])</div><div class="line">                    k = j;</div><div class="line">            </div><div class="line">            res += A[k];</div><div class="line">            st = k+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (res.length()&gt;<span class="number">1</span> &amp;&amp; res[<span class="number">0</span>] == <span class="string">'0'</span>)</div><div class="line">            res.erase(res.begin());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given string A representative a positive integer which has N digits, remove any k digits of the number, the remaining digits are arranged according to the original order to become a new positive integer.&lt;/p&gt;
&lt;p&gt;Find the smallest integer after remove k digits. k &amp;le; N &amp;le; 240.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Greedy" scheme="https://suzyz.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode/4Sum II</title>
    <link href="https://suzyz.github.io/2017/10/03/4sum2/"/>
    <id>https://suzyz.github.io/2017/10/03/4sum2/</id>
    <published>2017-10-03T03:07:19.000Z</published>
    <updated>2017-10-03T06:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given four integer arrays A,B,C,D, which have the same length of N where 0 &le; N &le; 500, compute the number of tuples (i,j,k,l) such that A[i] + B[j] + C[k] + D[l] == 0.</p><a id="more"></a><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h1><p>We can use a map to count the numbers of all possible values of A[i] + B[j] , where 1 &le; i,j &le; N. Then we enumerate k and l, and add the number of -C[k]-D[l] to the answer.<br>The time complexity is O(N^2).</p><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h1><p>We use array AB to store all possible values of A[i]+B[j], and array CD to store all possible values of -C[k]-D[l]. Then we sort AB and CD respectively. Now we only need to find how many pairs of equal values in AB and CD there are. This can be done with O(N^2) time, so the total time complexity is also O(N^2).</p><h1 id="Code-for-Solution-1"><a href="#Code-for-Solution-1" class="headerlink" title="Code for Solution 1"></a>Code for Solution 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; C, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; D)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = A.size(), ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; sum;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">        ++sum[A[i]+B[j]];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">        ans += sum[<span class="number">0</span>-C[i]-D[j]];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-for-Solution-2"><a href="#Code-for-Solution-2" class="headerlink" title="Code for Solution 2"></a>Code for Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; C, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; D)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = A.size(), total, ans = <span class="number">0</span>;</div><div class="line">        total = n*n;</div><div class="line">        <span class="keyword">int</span> ab[total+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;, cd[total+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">            &#123;</div><div class="line">                ab[k] = A[i] + B[j];</div><div class="line">                cd[k] = <span class="number">0</span> - C[i] - D[j];</div><div class="line">                k++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(ab,ab + total);</div><div class="line">        sort(cd,cd + total);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; total &amp;&amp; j &lt;total)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (ab[i] == cd[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> p = i, q = j, count1 = <span class="number">0</span>, count2 = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (p&lt;total &amp;&amp; ab[p] == ab[i])</div><div class="line">                &#123;</div><div class="line">                    ++p;</div><div class="line">                    ++count1;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (q&lt;total &amp;&amp; cd[q] == cd[j])</div><div class="line">                &#123;</div><div class="line">                    ++q;</div><div class="line">                    ++count2;</div><div class="line">                &#125;</div><div class="line">                ans += count1*count2;</div><div class="line">                i = p;</div><div class="line">                j = q;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            <span class="keyword">if</span> (ab[i] &gt; cd[j])</div><div class="line">                ++j;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                ++i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given four integer arrays A,B,C,D, which have the same length of N where 0 &amp;le; N &amp;le; 500, compute the number of tuples (i,j,k,l) such that A[i] + B[j] + C[k] + D[l] == 0.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://suzyz.github.io/tags/LeetCode/"/>
    
      <category term="Hash" scheme="https://suzyz.github.io/tags/Hash/"/>
    
      <category term="Array" scheme="https://suzyz.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode/Lowest Common Ancester Of A Binary Search Tree Or A Binary Tree</title>
    <link href="https://suzyz.github.io/2017/10/02/lowest-common-ancester-of-a-binary-search-tree-or-a-binary-tree/"/>
    <id>https://suzyz.github.io/2017/10/02/lowest-common-ancester-of-a-binary-search-tree-or-a-binary-tree/</id>
    <published>2017-10-02T01:54:23.000Z</published>
    <updated>2017-10-02T03:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><ol><li><p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p></li><li><p>What if the tree is just a binary tree ?</p></li></ol><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Subproblem 1 is trivial if we know the definition of BST.</p><p>Subproblem 2 needs more thinking. There are two ways to solve it.</p><ol><li><p>The first is traditional. We define a variant LCA and a function dfs(TreeNode *ROOT,TreeNode *p,TreeNode *q). dfs returns the number of given nodes that are in the subtree with ROOT as root. If dfs returns 2 and LCA have not been changed, then the answer is ROOT.</p></li><li><p>Let us define a recursive function f(TreeNode *ROOT,TreeNode *p,TreeNode *q).</p><ul><li>If the subtree with ROOT as root contains both p and q, f returns the LCA of p and q.</li><li>If the subtree only contains one of them, f returns that one.</li><li>If the subtree contains neither of them, f returns NULL.</li></ul></li></ol><p>For each ROOT, we first check whether it is NULL or equal to p or q. If that is the case, return ROOT. Then we call f(ROOT-&gt;left,p,q) and f(ROOT-&gt;right,p,q), and store the results in LEFT and RIGHT. If they are both not NULL, we know that both subtrees contain one of p and q. Thus ROOT is the LCA we are looking for. If only one of them are not NULL, then return it. If both are NULL, return NULL.</p><h1 id="Code-1-—-LCA-of-a-binary-search-tree"><a href="#Code-1-—-LCA-of-a-binary-search-tree" class="headerlink" title="Code 1 — LCA of a binary search tree"></a>Code 1 — LCA of a binary search tree</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (root == <span class="literal">NULL</span> || p == <span class="literal">NULL</span> || q == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">      <span class="keyword">if</span> (root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val)</div><div class="line">      <span class="keyword">return</span> lowestCommonAncestor(root-&gt;left,p,q);</div><div class="line">      <span class="keyword">if</span> (root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val)</div><div class="line">      <span class="keyword">return</span> lowestCommonAncestor(root-&gt;right,p,q);</div><div class="line">      <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-2-—-LCA-of-a-binary-tree-Solution-1"><a href="#Code-2-—-LCA-of-a-binary-tree-Solution-1" class="headerlink" title="Code 2 — LCA of a binary tree, Solution 1"></a>Code 2 — LCA of a binary tree, Solution 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// struct TreeNode &#123;</span></div><div class="line"> <span class="comment">//    int val;</span></div><div class="line"> <span class="comment">//     TreeNode *left;</span></div><div class="line"> <span class="comment">//    TreeNode *right;</span></div><div class="line"> <span class="comment">//    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></div><div class="line"> <span class="comment">// &#125;;</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">TreeNode *LCA;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode *root,TreeNode *p,TreeNode *q)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (p == root)</div><div class="line">++ count;</div><div class="line"><span class="keyword">if</span> (q == root)</div><div class="line">++ count;</div><div class="line"></div><div class="line">count += dfs(root-&gt;left,p,q);</div><div class="line"><span class="keyword">if</span> (count == <span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (!LCA)</div><div class="line">LCA = root;</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">count += dfs(root-&gt;right,p,q);</div><div class="line"><span class="keyword">if</span> (count == <span class="number">2</span> &amp;&amp; !LCA)</div><div class="line">LCA = root;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root,TreeNode *p,TreeNode *q)</span> </span>&#123;</div><div class="line">    LCA = <span class="literal">NULL</span>;</div><div class="line">        dfs(root,p,q);</div><div class="line">        <span class="keyword">return</span> LCA;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-3-–-LCA-of-a-binary-tree-Solution-2"><a href="#Code-3-–-LCA-of-a-binary-tree-Solution-2" class="headerlink" title="Code 3 – LCA of a binary tree, Solution 2"></a>Code 3 – LCA of a binary tree, Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// struct TreeNode &#123;</span></div><div class="line"> <span class="comment">//    int val;</span></div><div class="line"> <span class="comment">//     TreeNode *left;</span></div><div class="line"> <span class="comment">//    TreeNode *right;</span></div><div class="line"> <span class="comment">//    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></div><div class="line"> <span class="comment">// &#125;;</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root,TreeNode *p,TreeNode *q)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span> || root == p || root == q)</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line"></div><div class="line">        TreeNode *l = lowestCommonAncestor(root-&gt;left,p,q);</div><div class="line">        TreeNode *r = lowestCommonAncestor(root-&gt;right,p,q);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (l &amp;&amp; r)</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line"></div><div class="line"><span class="keyword">return</span> l ? l:r;</div><div class="line">       <span class="comment">// return l ? root-&gt;left:root-&gt;right;</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What if the tree is just a binary tree ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://suzyz.github.io/tags/LeetCode/"/>
    
      <category term="Graph Theory" scheme="https://suzyz.github.io/tags/Graph-Theory/"/>
    
      <category term="LCA" scheme="https://suzyz.github.io/tags/LCA/"/>
    
      <category term="Tree" scheme="https://suzyz.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank/Data Structures/No Prefix Set</title>
    <link href="https://suzyz.github.io/2017/10/01/no-prefix-set/"/>
    <id>https://suzyz.github.io/2017/10/01/no-prefix-set/</id>
    <published>2017-10-01T04:51:40.000Z</published>
    <updated>2017-10-01T05:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given N strings. Each string contains only lowercase letters from a to j(both inclusive). The set of N strings is said to be “GOOD SET” if no string is prefix of another string. Else, it is “BAD SET”.<br>(If two strings are identical, they are considered prefixes of each other.)</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We use trie to store the set of strings.<br>For each string s[i], we try to add it to the set. Apparently, we need to make sure that</p><ol><li>s[i] is not a prefix of s[0],s[1],… or s[i-1].</li><li>s[j] is not a prefix of s[i], for any j, 0 &le; j &lt; i.</li></ol><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="keyword">bool</span> is_element;</div><div class="line">Trie *p[<span class="number">10</span>];</div><div class="line"></div><div class="line">Trie()</div><div class="line">&#123;</div><div class="line">is_element = <span class="literal">false</span>;</div><div class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">&#125;</div><div class="line">~Trie();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> Trie::add(<span class="built_in">string</span> s)</div><div class="line">&#123;</div><div class="line">Trie *ch = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> cur = s[i] - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (ch-&gt;p[cur] == <span class="literal">NULL</span>)</div><div class="line">ch-&gt;p[cur] = <span class="keyword">new</span> Trie;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">if</span> (ch-&gt;p[cur]-&gt;is_element)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">ch = ch-&gt;p[cur];</div><div class="line">&#125;</div><div class="line">ch -&gt; is_element = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</div><div class="line"><span class="keyword">if</span> (ch-&gt;p[i] != <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">Trie *trie = <span class="keyword">new</span> Trie;</div><div class="line"></div><div class="line"><span class="built_in">cin</span>&gt;&gt;n;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">&#123;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;s;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!trie-&gt;add(s))</div><div class="line">&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"BAD SET"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"GOOD SET"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given N strings. Each string contains only lowercase letters from a to j(both inclusive). The set of N strings is said to be “GOOD SET” if no string is prefix of another string. Else, it is “BAD SET”.&lt;br&gt;(If two strings are identical, they are considered prefixes of each other.)&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="https://suzyz.github.io/categories/Data-Structure/"/>
    
    
      <category term="HackerRank" scheme="https://suzyz.github.io/tags/HackerRank/"/>
    
      <category term="Trie" scheme="https://suzyz.github.io/tags/Trie/"/>
    
  </entry>
  
</feed>
