<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suzy Zhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suzyz.github.io/"/>
  <updated>2017-10-04T02:19:31.000Z</updated>
  <id>https://suzyz.github.io/</id>
  
  <author>
    <name>Suzy Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LintCode/Delete Digits</title>
    <link href="https://suzyz.github.io/2017/10/04/delete-digits/"/>
    <id>https://suzyz.github.io/2017/10/04/delete-digits/</id>
    <published>2017-10-04T02:04:15.000Z</published>
    <updated>2017-10-04T02:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given string A representative a positive integer which has N digits, remove any k digits of the number, the remaining digits are arranged according to the original order to become a new positive integer.</p><p>Find the smallest integer after remove k digits. k &le; N &le; 240.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Removing k digits is actually choosing N-k digits to form a new integer.</p><p>Apparently, we should make the top digit minimal.<br>For any i, 0 &le; i &lt; N-k, we greedily choose the smallest digit in current range.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param A: A positive integer which has N digits, A is a string</div><div class="line">     * @param l: Remove k digits</div><div class="line">     * @return: A string</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">DeleteDigits</span><span class="params">(<span class="built_in">string</span> &amp;A, <span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">int</span> n = A.length();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> st = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-l; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k = st, en = l+i;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = st+<span class="number">1</span>; j &lt;= en; ++j)</div><div class="line">                <span class="keyword">if</span> (A[j]&lt;A[k])</div><div class="line">                    k = j;</div><div class="line">            </div><div class="line">            res += A[k];</div><div class="line">            st = k+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (res.length()&gt;<span class="number">1</span> &amp;&amp; res[<span class="number">0</span>] == <span class="string">'0'</span>)</div><div class="line">            res.erase(res.begin());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given string A representative a positive integer which has N digits, remove any k digits of the number, the remaining digits are arranged according to the original order to become a new positive integer.&lt;/p&gt;
&lt;p&gt;Find the smallest integer after remove k digits. k &amp;le; N &amp;le; 240.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Greedy" scheme="https://suzyz.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode/4Sum II</title>
    <link href="https://suzyz.github.io/2017/10/03/4sum2/"/>
    <id>https://suzyz.github.io/2017/10/03/4sum2/</id>
    <published>2017-10-03T03:07:19.000Z</published>
    <updated>2017-10-03T06:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given four integer arrays A,B,C,D, which have the same length of N where 0 &le; N &le; 500, compute the number of tuples (i,j,k,l) such that A[i] + B[j] + C[k] + D[l] == 0.</p><a id="more"></a><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h1><p>We can use a map to count the numbers of all possible values of A[i] + B[j] , where 1 &le; i,j &le; N. Then we enumerate k and l, and add the number of -C[k]-D[l] to the answer.<br>The time complexity is O(N^2).</p><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h1><p>We use array AB to store all possible values of A[i]+B[j], and array CD to store all possible values of -C[k]-D[l]. Then we sort AB and CD respectively. Now we only need to find how many pairs of equal values in AB and CD there are. This can be done with O(N^2) time, so the total time complexity is also O(N^2).</p><h1 id="Code-for-Solution-1"><a href="#Code-for-Solution-1" class="headerlink" title="Code for Solution 1"></a>Code for Solution 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; C, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; D)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = A.size(), ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; sum;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">        ++sum[A[i]+B[j]];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">        ans += sum[<span class="number">0</span>-C[i]-D[j]];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-for-Solution-2"><a href="#Code-for-Solution-2" class="headerlink" title="Code for Solution 2"></a>Code for Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; C, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; D)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = A.size(), total, ans = <span class="number">0</span>;</div><div class="line">        total = n*n;</div><div class="line">        <span class="keyword">int</span> ab[total+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;, cd[total+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">            &#123;</div><div class="line">                ab[k] = A[i] + B[j];</div><div class="line">                cd[k] = <span class="number">0</span> - C[i] - D[j];</div><div class="line">                k++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(ab,ab + total);</div><div class="line">        sort(cd,cd + total);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; total &amp;&amp; j &lt;total)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (ab[i] == cd[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> p = i, q = j, count1 = <span class="number">0</span>, count2 = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (p&lt;total &amp;&amp; ab[p] == ab[i])</div><div class="line">                &#123;</div><div class="line">                    ++p;</div><div class="line">                    ++count1;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (q&lt;total &amp;&amp; cd[q] == cd[j])</div><div class="line">                &#123;</div><div class="line">                    ++q;</div><div class="line">                    ++count2;</div><div class="line">                &#125;</div><div class="line">                ans += count1*count2;</div><div class="line">                i = p;</div><div class="line">                j = q;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            <span class="keyword">if</span> (ab[i] &gt; cd[j])</div><div class="line">                ++j;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                ++i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given four integer arrays A,B,C,D, which have the same length of N where 0 &amp;le; N &amp;le; 500, compute the number of tuples (i,j,k,l) such that A[i] + B[j] + C[k] + D[l] == 0.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://suzyz.github.io/tags/LeetCode/"/>
    
      <category term="Hash" scheme="https://suzyz.github.io/tags/Hash/"/>
    
      <category term="Array" scheme="https://suzyz.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode/Lowest Common Ancester Of A Binary Search Tree Or A Binary Tree</title>
    <link href="https://suzyz.github.io/2017/10/02/lowest-common-ancester-of-a-binary-search-tree-or-a-binary-tree/"/>
    <id>https://suzyz.github.io/2017/10/02/lowest-common-ancester-of-a-binary-search-tree-or-a-binary-tree/</id>
    <published>2017-10-02T01:54:23.000Z</published>
    <updated>2017-10-02T03:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><ol><li><p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p></li><li><p>What if the tree is just a binary tree ?</p></li></ol><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Subproblem 1 is trivial if we know the definition of BST.</p><p>Subproblem 2 needs more thinking. There are two ways to solve it.</p><ol><li><p>The first is traditional. We define a variant LCA and a function dfs(TreeNode *ROOT,TreeNode *p,TreeNode *q). dfs returns the number of given nodes that are in the subtree with ROOT as root. If dfs returns 2 and LCA have not been changed, then the answer is ROOT.</p></li><li><p>Let us define a recursive function f(TreeNode *ROOT,TreeNode *p,TreeNode *q).</p><ul><li>If the subtree with ROOT as root contains both p and q, f returns the LCA of p and q.</li><li>If the subtree only contains one of them, f returns that one.</li><li>If the subtree contains neither of them, f returns NULL.</li></ul></li></ol><p>For each ROOT, we first check whether it is NULL or equal to p or q. If that is the case, return ROOT. Then we call f(ROOT-&gt;left,p,q) and f(ROOT-&gt;right,p,q), and store the results in LEFT and RIGHT. If they are both not NULL, we know that both subtrees contain one of p and q. Thus ROOT is the LCA we are looking for. If only one of them are not NULL, then return it. If both are NULL, return NULL.</p><h1 id="Code-1-—-LCA-of-a-binary-search-tree"><a href="#Code-1-—-LCA-of-a-binary-search-tree" class="headerlink" title="Code 1 — LCA of a binary search tree"></a>Code 1 — LCA of a binary search tree</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (root == <span class="literal">NULL</span> || p == <span class="literal">NULL</span> || q == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">      <span class="keyword">if</span> (root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val)</div><div class="line">      <span class="keyword">return</span> lowestCommonAncestor(root-&gt;left,p,q);</div><div class="line">      <span class="keyword">if</span> (root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val)</div><div class="line">      <span class="keyword">return</span> lowestCommonAncestor(root-&gt;right,p,q);</div><div class="line">      <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-2-—-LCA-of-a-binary-tree-Solution-1"><a href="#Code-2-—-LCA-of-a-binary-tree-Solution-1" class="headerlink" title="Code 2 — LCA of a binary tree, Solution 1"></a>Code 2 — LCA of a binary tree, Solution 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// struct TreeNode &#123;</span></div><div class="line"> <span class="comment">//    int val;</span></div><div class="line"> <span class="comment">//     TreeNode *left;</span></div><div class="line"> <span class="comment">//    TreeNode *right;</span></div><div class="line"> <span class="comment">//    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></div><div class="line"> <span class="comment">// &#125;;</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">TreeNode *LCA;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode *root,TreeNode *p,TreeNode *q)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (p == root)</div><div class="line">++ count;</div><div class="line"><span class="keyword">if</span> (q == root)</div><div class="line">++ count;</div><div class="line"></div><div class="line">count += dfs(root-&gt;left,p,q);</div><div class="line"><span class="keyword">if</span> (count == <span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (!LCA)</div><div class="line">LCA = root;</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">count += dfs(root-&gt;right,p,q);</div><div class="line"><span class="keyword">if</span> (count == <span class="number">2</span> &amp;&amp; !LCA)</div><div class="line">LCA = root;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root,TreeNode *p,TreeNode *q)</span> </span>&#123;</div><div class="line">    LCA = <span class="literal">NULL</span>;</div><div class="line">        dfs(root,p,q);</div><div class="line">        <span class="keyword">return</span> LCA;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-3-–-LCA-of-a-binary-tree-Solution-2"><a href="#Code-3-–-LCA-of-a-binary-tree-Solution-2" class="headerlink" title="Code 3 – LCA of a binary tree, Solution 2"></a>Code 3 – LCA of a binary tree, Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// struct TreeNode &#123;</span></div><div class="line"> <span class="comment">//    int val;</span></div><div class="line"> <span class="comment">//     TreeNode *left;</span></div><div class="line"> <span class="comment">//    TreeNode *right;</span></div><div class="line"> <span class="comment">//    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></div><div class="line"> <span class="comment">// &#125;;</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root,TreeNode *p,TreeNode *q)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span> || root == p || root == q)</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line"></div><div class="line">        TreeNode *l = lowestCommonAncestor(root-&gt;left,p,q);</div><div class="line">        TreeNode *r = lowestCommonAncestor(root-&gt;right,p,q);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (l &amp;&amp; r)</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line"></div><div class="line"><span class="keyword">return</span> l ? l:r;</div><div class="line">       <span class="comment">// return l ? root-&gt;left:root-&gt;right;</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What if the tree is just a binary tree ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://suzyz.github.io/tags/LeetCode/"/>
    
      <category term="Graph Theory" scheme="https://suzyz.github.io/tags/Graph-Theory/"/>
    
      <category term="LCA" scheme="https://suzyz.github.io/tags/LCA/"/>
    
      <category term="Tree" scheme="https://suzyz.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank/Data Structures/No Prefix Set</title>
    <link href="https://suzyz.github.io/2017/10/01/no-prefix-set/"/>
    <id>https://suzyz.github.io/2017/10/01/no-prefix-set/</id>
    <published>2017-10-01T04:51:40.000Z</published>
    <updated>2017-10-01T05:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given N strings. Each string contains only lowercase letters from a to j(both inclusive). The set of N strings is said to be “GOOD SET” if no string is prefix of another string. Else, it is “BAD SET”.<br>(If two strings are identical, they are considered prefixes of each other.)</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We use trie to store the set of strings.<br>For each string s[i], we try to add it to the set. Apparently, we need to make sure that</p><ol><li>s[i] is not a prefix of s[0],s[1],… or s[i-1].</li><li>s[j] is not a prefix of s[i], for any j, 0 &le; j &lt; i.</li></ol><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="keyword">bool</span> is_element;</div><div class="line">Trie *p[<span class="number">10</span>];</div><div class="line"></div><div class="line">Trie()</div><div class="line">&#123;</div><div class="line">is_element = <span class="literal">false</span>;</div><div class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">&#125;</div><div class="line">~Trie();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> Trie::add(<span class="built_in">string</span> s)</div><div class="line">&#123;</div><div class="line">Trie *ch = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> cur = s[i] - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (ch-&gt;p[cur] == <span class="literal">NULL</span>)</div><div class="line">ch-&gt;p[cur] = <span class="keyword">new</span> Trie;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">if</span> (ch-&gt;p[cur]-&gt;is_element)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">ch = ch-&gt;p[cur];</div><div class="line">&#125;</div><div class="line">ch -&gt; is_element = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</div><div class="line"><span class="keyword">if</span> (ch-&gt;p[i] != <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">Trie *trie = <span class="keyword">new</span> Trie;</div><div class="line"></div><div class="line"><span class="built_in">cin</span>&gt;&gt;n;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">&#123;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;s;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!trie-&gt;add(s))</div><div class="line">&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"BAD SET"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"GOOD SET"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given N strings. Each string contains only lowercase letters from a to j(both inclusive). The set of N strings is said to be “GOOD SET” if no string is prefix of another string. Else, it is “BAD SET”.&lt;br&gt;(If two strings are identical, they are considered prefixes of each other.)&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="https://suzyz.github.io/categories/Data-Structure/"/>
    
    
      <category term="HackerRank" scheme="https://suzyz.github.io/tags/HackerRank/"/>
    
      <category term="Trie" scheme="https://suzyz.github.io/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Search A 2D matrix II</title>
    <link href="https://suzyz.github.io/2017/09/30/search-a-2D-matrix2/"/>
    <id>https://suzyz.github.io/2017/09/30/search-a-2D-matrix2/</id>
    <published>2017-09-30T02:46:19.000Z</published>
    <updated>2017-10-02T03:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Search for the value T in an M x N matrix and return the occurrence of it.</p><p>This matrix has the following properties:</p><ol><li>Integers in each row are sorted from left to right.</li><li>Integers in each column are sorted from up to bottom.</li><li>No duplicate integers in each row or column.</li></ol><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We can use two values i and j to mark the current position we are at. And we use the following algorithm.</p><ol><li>Let i = 0 and j = N-1.</li><li>If matrix[i][0] &gt; T , then the search is finished (Because of the property 2 of the matrix). </li><li>While matrix[i][j] &gt; T and j &ge; 0 , decrease j by 1.</li><li>If j &lt; 0 , then finish the search.</li><li>If matrix[i][j] == T, then increase the answer by 1.</li><li>Increase i by 1 and if i &lt; M, go back to step 2.</li></ol><p>Note that, because the matrix has property 2, we do not need to set j to N-1 every time we increase i.</p><p>The time complexity is O(M+N) and only constant extra space is needed.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param matrix: A list of lists of integers</div><div class="line">     * @param target: An integer you want to search in matrix</div><div class="line">     * @return: An integer indicate the total occurrence of target in the given matrix</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = matrix.size();</div><div class="line">        <span class="keyword">if</span> (m==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].size();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = n<span class="number">-1</span>, ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i&lt;m &amp;&amp; j&gt;=<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] &gt; target)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; matrix[i][j] &gt; target)</div><div class="line">                --j;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (j&lt;<span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (matrix[i][j]==target)</div><div class="line">                ++ans;</div><div class="line"></div><div class="line">            ++i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Search for the value T in an M x N matrix and return the occurrence of it.&lt;/p&gt;
&lt;p&gt;This matrix has the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Integers in each row are sorted from left to right.&lt;/li&gt;
&lt;li&gt;Integers in each column are sorted from up to bottom.&lt;/li&gt;
&lt;li&gt;No duplicate integers in each row or column.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Matrix" scheme="https://suzyz.github.io/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Flip Bits</title>
    <link href="https://suzyz.github.io/2017/09/29/flip-bits/"/>
    <id>https://suzyz.github.io/2017/09/29/flip-bits/</id>
    <published>2017-09-29T00:51:43.000Z</published>
    <updated>2017-09-29T01:19:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Determine the number of bits to flip when converting integer n to integer m.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>The answer is how many bits of (n xor m) are 1.</p><p>I think there are some relevant skills about bit manipulation that we need to know.</p><table><thead><tr><th>Binary Value</th><th>Sample</th><th>Meaning</th></tr></thead><tbody><tr><td>  x</td><td>00101100</td><td>the original x value</td></tr><tr><td>x and -x</td><td>00000100</td><td>extract lowest bit set</td></tr><tr><td>x or -x</td><td>11111100</td><td>create mask for lowest-set-bit &amp; bits to its left</td></tr><tr><td>x xor -x</td><td>11111000</td><td>create mask bits to left of lowest bit set</td></tr><tr><td>x and (x-1)</td><td>00101000</td><td>strip off lowest bit set ( useful to process words in O(bits set), instead of O(nbits in a word))</td></tr><tr><td>x or (x-1)</td><td>00101111</td><td>fill in all bits below lowest bit set</td></tr><tr><td>x xor (x-1)</td><td>00000111</td><td>create mask for lowest-set-bit &amp; bits to its right</td></tr><tr><td>~x and (x-1)</td><td>00000011</td><td>create mask for bits to right of lowest bit set</td></tr><tr><td>x or (x+1)</td><td>00101101</td><td>toggle lowest zero bit</td></tr><tr><td>x / (x and -x)</td><td>00001011</td><td>shift number right so lowest set bit is at bit 0</td></tr></tbody></table><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param a: An integer</div><div class="line">     * @param b: An integer</div><div class="line">     * @return: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitSwapRequired</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        a ^= b;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (a) &#123;</div><div class="line">            ans++;</div><div class="line">            a &amp;= (a<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Determine the number of bits to flip when converting integer n to integer m.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Bit Manipulation" scheme="https://suzyz.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Binary Representation</title>
    <link href="https://suzyz.github.io/2017/09/28/binary-representation/"/>
    <id>https://suzyz.github.io/2017/09/28/binary-representation/</id>
    <published>2017-09-28T08:06:19.000Z</published>
    <updated>2017-09-28T08:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a decimal number that is passed in as a string, return the binary representation (also a string). If the fractional part of the number can not be represented accurately in binary with at most 32 characters, return ERROR.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We need to transfer the integrel part and the fractional part of the given number into binary representation, but they need to be processed in different methods.</p><p>Be careful about these cases:<br>&nbsp; &nbsp; 1. The integral or frational part is 0.<br>&nbsp; &nbsp; 2. The fractional part has some ending zeros.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param n: Given a decimal number that is passed in as a string</div><div class="line">     * @return: A string</div><div class="line">     */</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">binaryRepresentation</span><span class="params">(<span class="built_in">string</span> &amp;n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = n.length();</div><div class="line">    <span class="keyword">int</span> pos = n.find(<span class="string">'.'</span>);</div><div class="line">    <span class="keyword">if</span> (pos == <span class="built_in">string</span>::npos)</div><div class="line">    pos = len;</div><div class="line"></div><div class="line">    <span class="built_in">string</span> integral,fractional;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> weight = <span class="number">5</span>, sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (i&lt;<span class="number">33</span> &amp;&amp; pos+i&lt;len) &#123;</div><div class="line">    sum = <span class="number">10</span>*sum + n[pos+i] - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">if</span> (sum &gt;= weight) &#123;</div><div class="line">    <span class="keyword">while</span> (sum &gt;= weight) &#123;</div><div class="line">    sum -= weight;</div><div class="line">    fractional+=<span class="string">'1'</span>;</div><div class="line">    weight *= <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">    weight *= <span class="number">5</span>;</div><div class="line">    fractional+=<span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ++i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)</div><div class="line"> <span class="keyword">return</span> <span class="string">"ERROR"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (pos+i&lt;len) &#123;</div><div class="line">    sum = <span class="number">10</span>*sum + n[pos+i] - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)</div><div class="line"> <span class="keyword">return</span> <span class="string">"ERROR"</span>;</div><div class="line">    ++i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sum = <span class="number">0</span>;</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (i&lt;pos) &#123;</div><div class="line">    sum = <span class="number">10</span>*sum + n[i] - <span class="string">'0'</span>;</div><div class="line">    ++i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    weight = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; sum&gt;<span class="number">0</span> ; ++j)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">if</span> (weight &amp; sum) &#123;</div><div class="line">    sum -= weight;</div><div class="line">    integral = <span class="string">'1'</span> + integral;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    integral = <span class="string">'0'</span> + integral;</div><div class="line"></div><div class="line">    weight &lt;&lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> zero = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;fractional.length(); j++)</div><div class="line">    <span class="keyword">if</span> (fractional[j] != <span class="string">'0'</span>) &#123;</div><div class="line">    zero = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!zero)</div><div class="line">    <span class="keyword">while</span> (fractional.length()&gt;<span class="number">0</span> &amp;&amp; fractional[fractional.length()<span class="number">-1</span>]==<span class="string">'0'</span>)</div><div class="line">    fractional.erase(fractional.length()<span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (integral.length()==<span class="number">0</span>)</div><div class="line">    integral = <span class="string">"0"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (zero)</div><div class="line">    <span class="keyword">return</span> integral;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> integral + <span class="string">'.'</span> + fractional;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">Solution s;</div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">n</span><span class="params">(<span class="string">"0.0"</span>)</span></span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;s.binaryRepresentation(n)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a decimal number that is passed in as a string, return the binary representation (also a string). If the fractional part of the number can not be represented accurately in binary with at most 32 characters, return ERROR.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Bit Manipulation" scheme="https://suzyz.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Trailing Zeros</title>
    <link href="https://suzyz.github.io/2017/09/27/trailing-zeros/"/>
    <id>https://suzyz.github.io/2017/09/27/trailing-zeros/</id>
    <published>2017-09-27T09:56:12.000Z</published>
    <updated>2017-09-27T14:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Find the number of trailing zeros in N! (N factorial).</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Apparently, the answer is equal to the number of 5 in N!, e.g. N/5 + N/(5^2) + N/(5^3) + … + N/(5^c), where 5^c &le; N &lt; 5^(c+1).</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param n: A long integer</div><div class="line">     * @return: An integer, denote the number of trailing zeros in n!</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">trailingZeros</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> count5 = <span class="number">0</span> , fac = <span class="number">5</span>;</div><div class="line">    <span class="keyword">while</span> (n&gt;=fac) &#123;</div><div class="line">    count5 += n/fac;</div><div class="line">    fac *= <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count5;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Find the number of trailing zeros in N! (N factorial).&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Number Theory" scheme="https://suzyz.github.io/tags/Number-Theory/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank/Dynamic Programming/Substring Diff</title>
    <link href="https://suzyz.github.io/2017/09/26/substring-diff/"/>
    <id>https://suzyz.github.io/2017/09/26/substring-diff/</id>
    <published>2017-09-26T03:10:22.000Z</published>
    <updated>2017-09-26T13:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given two strings of length N (P and Q) and an integer S, find the maximum of L such that there exists a pair of indices(i,j) for which we have M(i,j,L) &le; S.</p><p>M(i,j,L) refers to the size of the set {0 &le; x &lt; L | p[i+x] &ne; q[j+x]}.</p><a id="more"></a><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h1><p>First, let<br>&nbsp; &nbsp; f[i][j] = M(0,j-i,i), i &le; j<br>&nbsp; &nbsp; f[i][j] = M(i-j,0,j), i &gt; j</p><p>We can use dynamic programming to find f[i][j] for all i and j. With the help of f, for any len, 1 &le; len &le; N, we only need O(len^2) time to find whether it is legal.</p><p>Now we can use binary search to find the answer. The total time complexity is O(N^2 &times; (1 + log S)).</p><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h1><p>For any gap, 0 &le; gap &lt; N, we consider two sets of substrings :</p><ol><li><p>substrings ending at en in string P and substrings ending at en+gap in string Q.</p></li><li><p>substrings ending at en+gap in string P and substrings ending at en in string Q.</p></li></ol><p>By enumerating gap and en, we can cover all situations.</p><p>For each gap, we maintain two values, st1 and st2, as the mininal starting positions for two kinds of substrings.</p><p>Theoretically, the time complexity is O(N^2).</p><h1 id="Code-for-Solution-1"><a href="#Code-for-Solution-1" class="headerlink" title="Code for Solution 1"></a>Code for Solution 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1502</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,lim;</div><div class="line"><span class="keyword">char</span> s1[maxn],s2[maxn];</div><div class="line"><span class="keyword">int</span> f[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n-len+<span class="number">1</span>; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n-len+<span class="number">1</span>; ++j)</div><div class="line">            <span class="keyword">if</span> (f[i+len<span class="number">-1</span>][j+len<span class="number">-1</span>] - f[i<span class="number">-1</span>][j<span class="number">-1</span>]&lt;=lim)</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line"><span class="keyword">while</span>(T) &#123;</div><div class="line">    T--;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;lim);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);                                                                                                           </div><div class="line"></div><div class="line">    n = <span class="built_in">strlen</span>(s1+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (s1[i] == s2[j])</div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</div><div class="line">    <span class="keyword">while</span> (l&lt;r) &#123;</div><div class="line">        <span class="keyword">int</span> mid = l + ((r-l)&gt;&gt;<span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (check(mid)) &#123;</div><div class="line">            l = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            r = mid<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</div><div class="line">&#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Code-for-Solution-2"><a href="#Code-for-Solution-2" class="headerlink" title="Code for Solution 2"></a>Code for Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1502</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,lim;</div><div class="line"><span class="keyword">char</span> s1[maxn],s2[maxn];</div><div class="line"><span class="keyword">int</span> f[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line"><span class="keyword">while</span>(T) &#123;</div><div class="line">    T--;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;lim);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);                                                                                                           </div><div class="line"></div><div class="line">    n = <span class="built_in">strlen</span>(s1+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (s1[i] == s2[j])</div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = <span class="number">0</span>; gap &lt; n; ++gap) &#123;</div><div class="line">        <span class="keyword">int</span> st1 = <span class="number">0</span>, st2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> en = <span class="number">1</span>; en+gap &lt;= n; ++en) &#123;</div><div class="line">            <span class="keyword">while</span> (st1 &lt; en &amp;&amp; f[en][en+gap] - f[st1][st1+gap] &gt; lim)</div><div class="line">                st1++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (en-st1 &gt; ans)</div><div class="line">                ans = en-st1;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (st2 &lt; en &amp;&amp; f[en+gap][en] - f[st2+gap][st2] &gt; lim)</div><div class="line">                st2++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (en-st2 &gt; ans)</div><div class="line">                ans = en-st2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given two strings of length N (P and Q) and an integer S, find the maximum of L such that there exists a pair of indices(i,j) for which we have M(i,j,L) &amp;le; S.&lt;/p&gt;
&lt;p&gt;M(i,j,L) refers to the size of the set {0 &amp;le; x &amp;lt; L | p[i+x] &amp;ne; q[j+x]}.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="HackerRank" scheme="https://suzyz.github.io/tags/HackerRank/"/>
    
      <category term="DP" scheme="https://suzyz.github.io/tags/DP/"/>
    
      <category term="Binary Search" scheme="https://suzyz.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Search For A Range</title>
    <link href="https://suzyz.github.io/2017/09/25/search-for-a-range/"/>
    <id>https://suzyz.github.io/2017/09/25/search-for-a-range/</id>
    <published>2017-09-25T02:22:23.000Z</published>
    <updated>2017-09-25T02:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a <strong>sorted</strong> array of N integers, find the starting and ending position of a given target value.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We need to use binary search twice. The first is in range [0,…,N-1], and if we find a legal l, we ran the second binary search in range [l,..,N-1].</p><p>Be careful about how to calculate mid to prevent endless loop.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param A: an integer sorted array</div><div class="line">     * @param target: an integer to be inserted</div><div class="line">     * @return: a list of length 2, [index1, index2]</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        <span class="keyword">int</span> n = A.size();</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span> (l&lt;r) &#123;</div><div class="line">        <span class="keyword">int</span> mid = l + ((r-l)&gt;&gt;<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (A[mid]==target)</div><div class="line">        r = mid;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> (A[mid]&lt;target)</div><div class="line">        l = mid+<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        r = mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (l&gt;=n || A[l]!=target) &#123;</div><div class="line">        ans.push_back(<span class="number">-1</span>);</div><div class="line">        ans.push_back(<span class="number">-1</span>);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        ans.push_back(l);</div><div class="line"></div><div class="line">        r = n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span> (l&lt;r) &#123;</div><div class="line">        <span class="keyword">int</span> mid = l + ((r-l)&gt;&gt;<span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (A[mid]==target)</div><div class="line">        l = mid;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> (A[mid]&lt;target)</div><div class="line">        l = mid+<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        r = mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        ans.push_back(r);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a &lt;strong&gt;sorted&lt;/strong&gt; array of N integers, find the starting and ending position of a given target value.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Binary Search" scheme="https://suzyz.github.io/tags/Binary-Search/"/>
    
  </entry>
  
</feed>
