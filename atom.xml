<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suzy Zhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suzyz.github.io/"/>
  <updated>2017-10-30T14:19:01.000Z</updated>
  <id>https://suzyz.github.io/</id>
  
  <author>
    <name>Suzy Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LintCode/Maximum Subarry II; Maximum Subarray Difference</title>
    <link href="https://suzyz.github.io/2017/10/30/maximum-subarry2-and-maximum-subarray-difference/"/>
    <id>https://suzyz.github.io/2017/10/30/maximum-subarry2-and-maximum-subarray-difference/</id>
    <published>2017-10-30T13:06:44.000Z</published>
    <updated>2017-10-30T14:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><h2 id="Problem-1-Maximum-Subarray-II"><a href="#Problem-1-Maximum-Subarray-II" class="headerlink" title="Problem 1: Maximum Subarray II"></a>Problem 1: Maximum Subarray II</h2><p>Given an array of integers, find two non-overlapping subarrays which have the largest sum. The subarray should contain at least one number and the numbers in each subarray should be contiguous. </p><h2 id="Problem-2-Maximum-Subarray-Difference"><a href="#Problem-2-Maximum-Subarray-Difference" class="headerlink" title="Problem 2: Maximum Subarray Difference"></a>Problem 2: Maximum Subarray Difference</h2><p>Given an array of integers, find two non-overlapping subarrays A and B, such that |SUM(A) - SUM(B)| is the largest.<br>The subarray should contain at least one number and the numbers in each subarray should be contiguous.<br>Calculate the largest difference.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1:"></a>Problem 1:</h2><p>Let us denote the given array with A[0]A[1]…A[N-1].<br>Define</p><ol><li>f[i] as the maximal sum of subarray ending at i or before i,</li><li>g[i] as the maximal sum of two subarrays of which the second one ends at i.</li></ol><p>So the answer is max{g[i]}, i = 0,1,…,N-1.</p><p>If we use min_sum to indicate the minimum cumulative sum before i, we have</p><blockquote><p>f[i] = max{f[i-1], cur_sum - min_sum}<br>g[i] = max{g[i-1], f[i-1]} + A[i]</p></blockquote><p>The time complexity is O(N); the space complexity is O(1), since we only need f[i-1] and g[i-1], instead of f[0]…f[i-1] and g[0]…g[i-1], when we calculate f[i] and g[i].</p><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2:"></a>Problem 2:</h2><p>This is easier after we solved problem 1.</p><p>Define</p><ol><li>f[i][0] as the maximal sum of subarray ending at i or before i,</li><li>f[i][1] as the minimal sum of subarray ending at i or before i,</li><li>g[i][0] as the maximal difference of two subarrays of which the second one ends at i.</li><li>g[i][1] as the minimal difference of two subarrays of which the second one ends at i.</li></ol><p>So the answer is max{abs(g[i][j])}, i = 0,1,…,N-1, j = 0,1.</p><p>We have</p><blockquote><p>f[i][0] = max{f[i-1][0], cur_sum - min_sum}<br>f[i][1] = min{f[i-1][1], cur_sum - max_sum}<br>g[i][0] = max{g[i-1][0], -f[i-1][1]} + nums[i-1];<br>g[i][1] = min{g[i-1][1], -f[i-1][0]} + nums[i-1];</p></blockquote><p>The time complexity is O(N); the space complexity is O(1).</p><h1 id="Code-1-Maximum-Subarray-II-O-1-space"><a href="#Code-1-Maximum-Subarray-II-O-1-space" class="headerlink" title="Code 1: Maximum Subarray II, O(1) space"></a>Code 1: Maximum Subarray II, O(1) space</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: A list of integers</div><div class="line">     * @return: An integer denotes the sum of max two non-overlapping subarrays</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxTwoSubArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> f[<span class="number">2</span>], g[<span class="number">2</span>], sum = <span class="number">0</span>, min_sum = <span class="number">0</span>, ans = INT_MIN;</div><div class="line">        f[<span class="number">0</span>] = g[<span class="number">0</span>] = INT_MIN/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">        sum += nums[i<span class="number">-1</span>];</div><div class="line">        f[flag] = max(f[<span class="number">1</span>-flag],sum - min_sum);</div><div class="line"></div><div class="line">        min_sum = min(min_sum,sum);</div><div class="line"></div><div class="line">        g[flag] = max(g[<span class="number">1</span>-flag],f[<span class="number">1</span>-flag]) + nums[i<span class="number">-1</span>];</div><div class="line">        ans = max(ans,g[flag]);</div><div class="line"></div><div class="line">            flag = <span class="number">1</span>-flag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-2-Maximum-Subarray-II-O-N-space"><a href="#Code-2-Maximum-Subarray-II-O-N-space" class="headerlink" title="Code 2: Maximum Subarray II, O(N) space"></a>Code 2: Maximum Subarray II, O(N) space</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: A list of integers</div><div class="line">     * @return: An integer denotes the sum of max two non-overlapping subarrays</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxTwoSubArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> f[n+<span class="number">2</span>], g[n+<span class="number">2</span>], sum = <span class="number">0</span>, min_sum = <span class="number">0</span>, ans = INT_MIN;</div><div class="line">        f[<span class="number">0</span>] = g[<span class="number">0</span>] = INT_MIN/<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">        sum += nums[i<span class="number">-1</span>];</div><div class="line">        f[i] = max(f[i<span class="number">-1</span>],sum - min_sum);</div><div class="line"></div><div class="line">        min_sum = min(min_sum,sum);</div><div class="line"></div><div class="line">        g[i] = max(g[i<span class="number">-1</span>],f[i<span class="number">-1</span>]) + nums[i<span class="number">-1</span>];</div><div class="line">        ans = max(ans,g[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span>  ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Code-3-Maximum-Subarray-Difference"><a href="#Code-3-Maximum-Subarray-Difference" class="headerlink" title="Code 3: Maximum Subarray Difference"></a>Code 3: Maximum Subarray Difference</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param nums: A list of integers</div><div class="line">     * @return: An integer indicate the value of maximum difference between two substrings</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDiffSubArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line">    <span class="keyword">int</span> f[n+<span class="number">2</span>][<span class="number">2</span>],g[n+<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = g[<span class="number">0</span>][<span class="number">0</span>] = INT_MIN;</div><div class="line">    f[<span class="number">0</span>][<span class="number">1</span>] = g[<span class="number">0</span>][<span class="number">1</span>] = INT_MAX;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, min_sum = <span class="number">0</span>, max_sum = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    &#123;</div><div class="line">    sum += nums[i<span class="number">-1</span>];</div><div class="line">    f[i][<span class="number">0</span>] = max(f[i<span class="number">-1</span>][<span class="number">0</span>],sum - min_sum);</div><div class="line">    f[i][<span class="number">1</span>] = min(f[i<span class="number">-1</span>][<span class="number">1</span>],sum - max_sum);</div><div class="line"></div><div class="line">    min_sum = min(sum,min_sum);</div><div class="line">    max_sum = max(sum,max_sum);</div><div class="line"></div><div class="line">    g[i][<span class="number">0</span>] = max(g[i<span class="number">-1</span>][<span class="number">0</span>], -f[i<span class="number">-1</span>][<span class="number">1</span>]) + nums[i<span class="number">-1</span>];</div><div class="line">    g[i][<span class="number">1</span>] = min(g[i<span class="number">-1</span>][<span class="number">1</span>], -f[i<span class="number">-1</span>][<span class="number">0</span>]) + nums[i<span class="number">-1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i&gt;<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">    ans = max(<span class="built_in">abs</span>(g[i][<span class="number">0</span>]), ans);</div><div class="line">    ans = max(<span class="built_in">abs</span>(g[i][<span class="number">1</span>]), ans);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;h2 id=&quot;Problem-1-Maximum-Subarray-II&quot;&gt;&lt;a href=&quot;#Problem-1-Maximum-Subarray-II&quot; class=&quot;headerlink&quot; title=&quot;Problem 1: Maximum Subarray II&quot;&gt;&lt;/a&gt;Problem 1: Maximum Subarray II&lt;/h2&gt;&lt;p&gt;Given an array of integers, find two non-overlapping subarrays which have the largest sum. The subarray should contain at least one number and the numbers in each subarray should be contiguous. &lt;/p&gt;
&lt;h2 id=&quot;Problem-2-Maximum-Subarray-Difference&quot;&gt;&lt;a href=&quot;#Problem-2-Maximum-Subarray-Difference&quot; class=&quot;headerlink&quot; title=&quot;Problem 2: Maximum Subarray Difference&quot;&gt;&lt;/a&gt;Problem 2: Maximum Subarray Difference&lt;/h2&gt;&lt;p&gt;Given an array of integers, find two non-overlapping subarrays A and B, such that |SUM(A) - SUM(B)| is the largest.&lt;br&gt;The subarray should contain at least one number and the numbers in each subarray should be contiguous.&lt;br&gt;Calculate the largest difference.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="DP" scheme="https://suzyz.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>LintCode /A + B Problem</title>
    <link href="https://suzyz.github.io/2017/10/30/a-plus-b-problem/"/>
    <id>https://suzyz.github.io/2017/10/30/a-plus-b-problem/</id>
    <published>2017-10-30T11:58:47.000Z</published>
    <updated>2017-10-30T12:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Write a function that add two numbers A and B without using “+” or any arithmetic operators.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Let x = a ^ b, y = (a&amp;b) &lt;&lt; 1. Then x contains the different digits of a and b. (a&amp;b) contains the same digits of a and b; y denotes the carrying digits. So when we add x and y, we get the sum of a and b.</p><p>So we use a while loop to implement the process. Each time we use x and y to replace a and b, respectively. When the carry is zero, we have got the answer.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param : An integer</div><div class="line">     * @param : An integer</div><div class="line">     * @return: The sum of a and b</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">aplusb</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (b)</div><div class="line">    &#123;</div><div class="line">    x = a^b;</div><div class="line">    y = (a&amp;b) &lt;&lt; <span class="number">1</span>;</div><div class="line"></div><div class="line">    a = x;</div><div class="line">    b = y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Write a function that add two numbers A and B without using “+” or any arithmetic operators.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Bit Manipulation" scheme="https://suzyz.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Longest Substring with At Most K Distinct Characters</title>
    <link href="https://suzyz.github.io/2017/10/27/longest-substring-with-at-most-k-distinct-characters/"/>
    <id>https://suzyz.github.io/2017/10/27/longest-substring-with-at-most-k-distinct-characters/</id>
    <published>2017-10-27T13:45:08.000Z</published>
    <updated>2017-10-28T14:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a string S and an integer K, find the length of the longest substring T that contains at most K distinct characters.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We can use two pointers, L and R, to mark the beginning and ending points of the current subsequence. Each time we greedily move R forward by 1, without breaking the rule that the substring contains at most K distinct characters. That is, if and only if the rule would not hold when R is moved forward, we move L forward too.</p><p>The time complexity is O(N).</p><p>Plus, there are some details with coding. In line 16 of the following code, if we replace the inequality with “r&lt;s.length()”, there will be errors. Because r is of type “int” and s.length() is of type “unsigned int”, r will be converted to type “unsigned int” for the comparison. -1 will be converted to 4294967295, which is the maximum of unsigned int.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param s: A string</div><div class="line">     * @param k: An integer</div><div class="line">     * @return: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstringKDistinct</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s.length() == <span class="number">0</span> || k &lt;= <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">-1</span>, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> total = <span class="number">0</span>, status[<span class="number">150</span>];</div><div class="line">    <span class="built_in">memset</span>(status,<span class="number">0</span>,<span class="keyword">sizeof</span>(status));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (r&lt;(<span class="keyword">int</span>)s.length())</div><div class="line">    &#123;</div><div class="line">    ans = max(ans,r-l+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r == s.length() - <span class="number">1</span>)</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    ++r;</div><div class="line">    <span class="keyword">if</span> (status[s[r]] == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">    ++total;</div><div class="line">    <span class="keyword">while</span> (total &gt; k)</div><div class="line">    &#123;</div><div class="line">    --status[s[l]];</div><div class="line">    <span class="keyword">if</span> (status[s[l]] == <span class="number">0</span>)</div><div class="line">    --total;</div><div class="line"></div><div class="line">    ++l;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ++status[s[r]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a string S and an integer K, find the length of the longest substring T that contains at most K distinct characters.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Greedy" scheme="https://suzyz.github.io/tags/Greedy/"/>
    
      <category term="String" scheme="https://suzyz.github.io/tags/String/"/>
    
      <category term="Two Pointers" scheme="https://suzyz.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Largest Rectangle in Histogram</title>
    <link href="https://suzyz.github.io/2017/10/23/largest-rectangle-in-histogram/"/>
    <id>https://suzyz.github.io/2017/10/23/largest-rectangle-in-histogram/</id>
    <published>2017-10-23T07:11:42.000Z</published>
    <updated>2017-10-30T11:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given N non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of the largest rectangle in the histogram.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>The plain O(N^2) solution is relatively easy to come up with. But can we make it faster?</p><p>Suppose we are calculating the area of the largest rectangle ending at ith bar.<br>If H[i-1] &gt; H[i], we do not need to remember the height of the (i-1)th bar. Because the (i-1)th bar would not limit the height of the rectangle, it is not helpful to the calculation.<br>Similiarly, if H[i-1] &gt; H[i] and H[i-2] &gt; H[i-1], we do not need to remember H[i-2] and H[i-1].</p><p>So, actually we want to keep a non-decreasing sequence of bars.</p><p>The stack is perfect for implementing this.</p><p>First, we need to insert two bars with 0 height into the beginning and the end of the histogram, to ensure the situations where the rectangles containing the first or the last bar are calculated. And we push the first bar into the stack.</p><p>Then, we iterate through the rest bars. If the bar on the top of the stack has a height bigger than the current bar, we pop it out and calculate the areas of the rectangles ending at it. We keep doing this until the bar on the top of the stack is lower than the current bar.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param height: A list of integer</div><div class="line">     * @return: The area of largest rectangle in the histogram</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;height)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = height.size(), ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        height.insert(height.begin(),<span class="number">0</span>);</div><div class="line">        height.push_back(<span class="number">0</span>);</div><div class="line">        n += <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">        st.push(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">1</span>; idx &lt; n; ++idx)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (height[st.top()] &gt; height[idx])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> first = st.top();</div><div class="line">                <span class="keyword">int</span> last = first;</div><div class="line">                <span class="keyword">while</span> (!st.empty() &amp;&amp; height[st.top()] &gt; height[idx])</div><div class="line">                &#123;</div><div class="line">                    first = st.top();</div><div class="line">                    st.pop();</div><div class="line">                    ans = max(ans,height[first] * (last - st.top()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            st.push(idx);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given N non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of the largest rectangle in the histogram.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Stack" scheme="https://suzyz.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Word Search II</title>
    <link href="https://suzyz.github.io/2017/10/22/word-search2/"/>
    <id>https://suzyz.github.io/2017/10/22/word-search2/</id>
    <published>2017-10-22T11:07:15.000Z</published>
    <updated>2017-10-22T11:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a matrix of lower alphabets and a dictionary, find all words in the dictionary that can be found in the matrix. A word can start from any position in the matrix and go left/right/up/down to the adjacent position.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>First, we use Trie to record the words in the dictionary.</p><p>Second, we iterate the indices of the starting position of strings. For each (i,j), if there are words beginning with matrix[i][j], we use BFS to search for all possible words starting here. During the search, we can greatly cut the search tree with the help of the Trie we built.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c;</div><div class="line"><span class="keyword">bool</span> is_word;</div><div class="line"><span class="keyword">int</span> idx;</div><div class="line">Node *p[<span class="number">26</span>];</div><div class="line">Node() &#123; idx = <span class="number">0</span>; is_word = <span class="literal">false</span>; <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p)); &#125;</div><div class="line">Node(<span class="keyword">char</span> c1)</div><div class="line">&#123;</div><div class="line">c = c1;</div><div class="line">idx = <span class="number">0</span>;</div><div class="line">is_word = <span class="literal">false</span>;</div><div class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">Node *root;</div><div class="line">Trie() &#123; root = <span class="keyword">new</span> Node; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;w,<span class="keyword">int</span> idx)</span></span></div><div class="line">&#123;</div><div class="line">Node *cur = root;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w.length(); ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c = w[i]-<span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (!cur-&gt;p[c])</div><div class="line">cur-&gt;p[c] = <span class="keyword">new</span> Node(c);</div><div class="line">cur = cur-&gt;p[c];</div><div class="line">&#125;</div><div class="line">cur-&gt;is_word = <span class="literal">true</span>;</div><div class="line">cur-&gt;idx = idx;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Status</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line">Node *ptr;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; used;</div><div class="line"></div><div class="line">Status(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,Node *p1,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;u)</div><div class="line">&#123;</div><div class="line">x = x1; y = y1; ptr = p1; used = u;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,Node *p1,<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;board,<span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">queue</span>&lt;Status&gt; q;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; u(n*m,<span class="number">0</span>);</div><div class="line">u[x*m+y] = <span class="literal">true</span>;</div><div class="line"><span class="function">Status <span class="title">init</span><span class="params">(x,y,p1,u)</span></span>;</div><div class="line"></div><div class="line">q.push(init);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">Status cur = q.front();</div><div class="line">q.pop();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (cur.ptr-&gt;is_word)</div><div class="line">res.insert(words[cur.ptr-&gt;idx]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> tx = cur.x + dir[i][<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span> (tx &lt; <span class="number">0</span> || tx &gt;= n)</div><div class="line"><span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> ty = cur.y + dir[i][<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span> (ty &lt; <span class="number">0</span> || ty &gt;= m || cur.used[tx*m+ty])</div><div class="line"><span class="keyword">continue</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!cur.ptr-&gt;p[board[tx][ty]-<span class="string">'a'</span>])</div><div class="line"><span class="keyword">continue</span>;</div><div class="line"></div><div class="line"><span class="function">Status <span class="title">next</span><span class="params">(tx,ty,cur.ptr-&gt;p[board[tx][ty]-<span class="string">'a'</span>],cur.used)</span></span>;</div><div class="line">next.used[tx*m+ty] = <span class="literal">true</span>;</div><div class="line">q.push(next);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">     * @param board: A list of lists of character</div><div class="line">     * @param words: A list of string</div><div class="line">     * @return: A list of string</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; wordSearchII(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;board, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words) &#123;</div><div class="line">    <span class="keyword">int</span> n = board.size();</div><div class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;();</div><div class="line"></div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line"></div><div class="line">    Trie trie;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.size(); ++i)</div><div class="line">    trie.insert(words[i],i);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> m = board[<span class="number">0</span>].size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">    <span class="keyword">if</span> (trie.root-&gt;p[board[i][j]-<span class="string">'a'</span>])</div><div class="line">    bfs(i,j,trie.root-&gt;p[board[i][j]-<span class="string">'a'</span>],n,m,board,res,words);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a matrix of lower alphabets and a dictionary, find all words in the dictionary that can be found in the matrix. A word can start from any position in the matrix and go left/right/up/down to the adjacent position.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Trie" scheme="https://suzyz.github.io/tags/Trie/"/>
    
      <category term="BFS" scheme="https://suzyz.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Longest Consecutive Sequence</title>
    <link href="https://suzyz.github.io/2017/10/22/longest-consecutive-sequence/"/>
    <id>https://suzyz.github.io/2017/10/22/longest-consecutive-sequence/</id>
    <published>2017-10-22T04:44:17.000Z</published>
    <updated>2017-10-22T06:05:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given an unsorted array of integers, A[1], A[2],…, A[N], find the length of the longest consecutive elements sequence.</p><a id="more"></a><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h1><p>We can sort the array first, and iterate through it.</p><p>This takes O(NlogN) time but does not need extra space.</p><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h1><p>Unordered set or hash table can help us to achieve a better time complexity of O(N).</p><p>First, we put all integers in the array in an unordered set (or a hash table).</p><p>Second, we iterate through the given array. For each A[i], we calculate the maximal r such that A[i],A[i]+1,A[i]+2,…,A[i]+r are all in the set, the maximal l such that A[i],A[i]-1,A[i]-2,…,A[i]-l are all in the set. Then we update the answer with l+r+1, and erase A[i]-l,A[i]-l+1,…,A[i],A[i]+1,…,A[i]+r from the set.</p><p>The time and space complexity are both O(N).</p><h1 id="Code-for-Solution-2"><a href="#Code-for-Solution-2" class="headerlink" title="Code for Solution 2"></a>Code for Solution 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param num: A list of integers</div><div class="line">     * @return: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s(num.begin(),num.end());</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.size(); ++i)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">if</span> (!s.count(num[i]))</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">        s.erase(num[i]);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> pre = num[i] - <span class="number">1</span>, next = num[i] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (s.count(pre))</div><div class="line">        s.erase(pre--);</div><div class="line">        <span class="keyword">while</span> (s.count(next))</div><div class="line">        s.erase(next++);</div><div class="line"></div><div class="line">        ans = max(ans,next - <span class="number">1</span> - pre);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given an unsorted array of integers, A[1], A[2],…, A[N], find the length of the longest consecutive elements sequence.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="Array" scheme="https://suzyz.github.io/tags/Array/"/>
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Distinct Subsequences</title>
    <link href="https://suzyz.github.io/2017/10/21/distinct-subsequences/"/>
    <id>https://suzyz.github.io/2017/10/21/distinct-subsequences/</id>
    <published>2017-10-21T03:29:03.000Z</published>
    <updated>2017-10-21T04:02:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a string S and a string T, count the number of distinct subsequences of T in S.</p><a id="more"></a><p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, “ACE” is a subsequence of “ABCDE” while “AEC” is not).</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>The problem is actually about finding the number of ways to delete some (can be none) of the characters of S such that the remaining string is the same with T.</p><p>We can use dynamic programming to solve this problem.</p><p>First, let f[i,j] be the number of distinct ways to delete some characters from S[1]S[2]…S[i] such that the remaining string is the same with T[0]T[1]T[2]…T[j]. So we have</p><blockquote><p>f[i,j] = f[i-1,j] , if j &le; i &amp;&amp; S[i] != T[j]<br>f[i,j] = f[i-1,j] + f[i-1,j-1] , if j &le; i &amp;&amp; S[i] == T[j]</p></blockquote><p>Notice that f[i,j] only depends on f[i-1,j] and f[i-1,j-1]. We can reduce space complexity using f[j] instead of f[i,j]. If S[i] != T[j], there is no need to change the value of f[j]. If S[i] == T[j], we let f[j] += f[j-1]. The f[j-1] here is actually f[i-1,j-1], so we need to enumerate j from min(i,m) down to 1.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param : A string</div><div class="line">     * @param : A string</div><div class="line">     * @return: Count the number of distinct subsequences</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = S.length(), m = T.length();</div><div class="line">        <span class="keyword">int</span> f[m+<span class="number">2</span>];</div><div class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</div><div class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = min(m,i); j&gt;= <span class="number">1</span>; --j)</div><div class="line">                <span class="keyword">if</span> (S[i<span class="number">-1</span>] == T[j<span class="number">-1</span>])</div><div class="line">                    f[j] += f[j<span class="number">-1</span>];</div><div class="line"></div><div class="line"><span class="keyword">return</span> f[m];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a string S and a string T, count the number of distinct subsequences of T in S.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="DP" scheme="https://suzyz.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Word Ladder II</title>
    <link href="https://suzyz.github.io/2017/10/20/word-ladder2/"/>
    <id>https://suzyz.github.io/2017/10/20/word-ladder2/</id>
    <published>2017-10-20T14:05:56.000Z</published>
    <updated>2017-10-21T06:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given two words (start and end), and a dictionary,(All words have the same length), find all shortest transformation sequence(s) from start to end, such that:</p><ol><li>Only one letter can be changed at a time</li><li>Each intermediate word must exist in the dictionary</li></ol><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>We can use Breadth First Search(BFS) to find the shortest transformation sequences. In order to save time, we can use the container “unordered_set” in STL to keep a record of visited strings.</p><p>In addition, we need to find all shortest sequences, not just any of them, so I think there are two things we need to do.</p><ol><li><p>Instead of stopping the search right after we find the shortest length, we continue the search until next level of the search tree.</p></li><li><p>We allow there to be same strings in each level of the search tree.<br>To implement this, we can use two unordered sets, pre_visited and cur_level_visited. The first contains all strings that have been searched before this level, while the second only contains the strings of this level. Suppose we have a string S in current level, if S is in the dictionary and not in the pre_visited set, then we add it to the end of the queue and insert it into the cur_level_visited set. After each level, we insert all elements in cur_level_visited set to pre_visited set, and clear the cur_level_visited set.</p></li></ol><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param start: a string</div><div class="line">     * @param end: a string</div><div class="line">     * @param dict: a set of string</div><div class="line">     * @return: a list of lists of string</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; q;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre;</div><div class="line">        </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; findLadders(<span class="built_in">string</span> &amp;start, <span class="built_in">string</span> &amp;end, <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; &amp;dict) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; res;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (start == end)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp(<span class="number">2</span>,<span class="string">""</span>);</div><div class="line">            tmp[<span class="number">0</span>] = start;</div><div class="line">            tmp[<span class="number">1</span>] = end;</div><div class="line">            res.push_back(tmp);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dict.insert(end);</div><div class="line"></div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; vis;</div><div class="line">        </div><div class="line">        q.push_back(start);</div><div class="line">        pre.push_back(<span class="number">-1</span>);</div><div class="line">        <span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">1</span>;</div><div class="line">        vis.insert(start);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> n = start.length();</div><div class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> found = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (head&lt;tail &amp;&amp; !found)</div><div class="line">        &#123;</div><div class="line">            ++level;</div><div class="line">            <span class="keyword">int</span> num = tail - head;</div><div class="line">            <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; this_level;</div><div class="line">            <span class="keyword">while</span> (num--)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">string</span> cur = q[head++];</div><div class="line">                </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">string</span> y = cur;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="string">'a'</span>; j &lt;= <span class="string">'z'</span>; ++j)</div><div class="line">                    <span class="keyword">if</span> (j!=cur[i])</div><div class="line">                    &#123;</div><div class="line">                         y[i] = j;</div><div class="line">                        <span class="keyword">if</span> (y == end)</div><div class="line">                        &#123;</div><div class="line">                            found = <span class="literal">true</span>;</div><div class="line">                            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp(level,<span class="string">""</span>);</div><div class="line">                            tmp[level<span class="number">-1</span>] = end;</div><div class="line">                            <span class="keyword">int</span> idx = head<span class="number">-1</span>;</div><div class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> k = level<span class="number">-2</span>; k &gt;= <span class="number">0</span> ; --k)</div><div class="line">                            &#123;</div><div class="line">                                tmp[k] = q[idx];</div><div class="line">                                idx = pre[idx];</div><div class="line">                            &#125;</div><div class="line">                            res.push_back(tmp);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                        <span class="keyword">if</span> (dict.count(y) &amp;&amp; vis.count(y)==<span class="number">0</span>)</div><div class="line">                        &#123;</div><div class="line">                            this_level.insert(y);</div><div class="line">                            q.push_back(y);</div><div class="line">                            pre.push_back(head<span class="number">-1</span>);</div><div class="line">                            ++tail;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!found)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt;::iterator i = this_level.begin(); i != this_level.end(); ++i)</div><div class="line">                    vis.insert(*i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given two words (start and end), and a dictionary,(All words have the same length), find all shortest transformation sequence(s) from start to end, such that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only one letter can be changed at a time&lt;/li&gt;
&lt;li&gt;Each intermediate word must exist in the dictionary&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="BFS" scheme="https://suzyz.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LintCode/Topological Sorting</title>
    <link href="https://suzyz.github.io/2017/10/16/topological-sorting/"/>
    <id>https://suzyz.github.io/2017/10/16/topological-sorting/</id>
    <published>2017-10-16T13:13:36.000Z</published>
    <updated>2017-10-16T13:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given an directed graph, find any topological order for it.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Topological sorting is a very classic algorithm. It can be implemented in many ways. I used Kahn’s algorithm.</p><p>For details, check this:<br><a href="https://en.wikipedia.org/wiki/Topological_sorting" target="_blank" rel="external">Topological sorting - Wikipedia</a></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> struct directedgraphnode &#123;</div><div class="line">     int label;</div><div class="line">     vector&lt;directedgraphnode *&gt; neighbors;</div><div class="line">     directedgraphnode(int x) : label(x) &#123;&#125;;</div><div class="line"> &#125;;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param graph: A list of Directed graph node</div><div class="line">     * @return: Any topological order for the given graph.</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;DirectedGraphNode*&gt; topSort(<span class="built_in">vector</span>&lt;DirectedGraphNode*&gt;&amp; graph) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> n = graph.size();</div><div class="line">        <span class="keyword">int</span> nums[n+<span class="number">1</span>],indegree[n+<span class="number">1</span>];</div><div class="line">       </div><div class="line">       <span class="built_in">memset</span>(indegree,<span class="number">0</span>,<span class="keyword">sizeof</span>(indegree));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">        nums[i] = graph[i]-&gt;neighbors.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums[i]; ++j)</div><div class="line">        ++indegree[graph[i]-&gt;neighbors[j]-&gt;label];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> vis[n+<span class="number">1</span>];</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">vector</span>&lt;DirectedGraphNode*&gt; res;</div><div class="line">        <span class="keyword">int</span> k = n;</div><div class="line">        <span class="keyword">while</span> (k)</div><div class="line">        &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">       &#123;</div><div class="line">       <span class="keyword">int</span> x = graph[i]-&gt;label;</div><div class="line">       <span class="keyword">if</span> (!vis[x] &amp;&amp; indegree[x]==<span class="number">0</span>)</div><div class="line">       &#123;</div><div class="line">       --k;</div><div class="line">       vis[x] = <span class="literal">true</span>;</div><div class="line">       res.push_back(graph[i]);</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums[i]; ++j)</div><div class="line">       &#123;</div><div class="line">       <span class="keyword">int</span> y = graph[i]-&gt;neighbors[j]-&gt;label;</div><div class="line">       <span class="keyword">if</span> (!vis[y])</div><div class="line">       --indegree[y];</div><div class="line">       &#125;</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given an directed graph, find any topological order for it.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="LintCode" scheme="https://suzyz.github.io/tags/LintCode/"/>
    
      <category term="Graph Theory" scheme="https://suzyz.github.io/tags/Graph-Theory/"/>
    
      <category term="Topological Sorting" scheme="https://suzyz.github.io/tags/Topological-Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces/873B. Balanced Substring</title>
    <link href="https://suzyz.github.io/2017/10/15/balanced-substring/"/>
    <id>https://suzyz.github.io/2017/10/15/balanced-substring/</id>
    <published>2017-10-15T06:50:12.000Z</published>
    <updated>2017-10-15T07:09:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h1><p>Given a string S consisting only of characters 0 and 1. A substring starts from l to r is called balanced if the number of zeroes equals to the number of ones in this substring. Determine the length of the longest balanced substring of S.</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Let sum_zero[i] be the number of zeroes in the substring S[1]S[2]…S[i], and sum_one[i] be the number of ones.</p><p>If a substring S[i]S[i+1]…S[j] is balanced, we have this equation:</p><blockquote><p>sum_zero[j] - sum_zero[i-1] = sum_one[j] - sum_one[i-1] &nbsp; (1)</p></blockquote><p>If we let diff[i] = sum_zero[i] - sum_one[i], then (1) is actually:</p><blockquote><p>diff[j] = diff[i-1] &nbsp; (2)</p></blockquote><p>So, to find the longest substring ending at j, we only need to find the minimum i, such that (2) holds. If such i exits, the length of the longest substring ending at j is j-i+1, which can be used to update the answer.</p><p>The space and time complexities are both O(N).</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,diff[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> min_idx[maxn*<span class="number">2</span> + <span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum0 = <span class="number">0</span>, sum1 = <span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(min_idx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(min_idx));</div><div class="line"></div><div class="line">min_idx[maxn] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (s[i] == <span class="string">'0'</span>)</div><div class="line">++sum0;</div><div class="line"><span class="keyword">else</span></div><div class="line">++sum1;</div><div class="line"></div><div class="line">diff[i] = sum0 - sum1;</div><div class="line"><span class="keyword">if</span> (min_idx[diff[i] + maxn] == <span class="number">-1</span>)</div><div class="line">min_idx[diff[i] + maxn] = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> idx = min_idx[diff[i] + maxn];</div><div class="line"><span class="keyword">if</span> (idx != <span class="number">-1</span>)</div><div class="line">ans = max(ans,i - idx);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Problem-Summary&quot;&gt;&lt;a href=&quot;#Problem-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problem Summary&quot;&gt;&lt;/a&gt;Problem Summary&lt;/h1&gt;&lt;p&gt;Given a string S consisting only of characters 0 and 1. A substring starts from l to r is called balanced if the number of zeroes equals to the number of ones in this substring. Determine the length of the longest balanced substring of S.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://suzyz.github.io/categories/Algorithm/"/>
    
    
      <category term="DP" scheme="https://suzyz.github.io/tags/DP/"/>
    
      <category term="Codeforces" scheme="https://suzyz.github.io/tags/Codeforces/"/>
    
      <category term="Implementation" scheme="https://suzyz.github.io/tags/Implementation/"/>
    
  </entry>
  
</feed>
